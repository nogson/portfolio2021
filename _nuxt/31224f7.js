(window.webpackJsonp=window.webpackJsonp||[]).push([[0],Array(333).concat([function(e,n,t){"use strict";t.r(n);var o={name:"DynamicImage",props:{path:{type:String,required:!0},alt:{type:String,required:!0},margin:{type:String},width:{type:String},useFilter:{type:Boolean,default:!1}},computed:{dynamicImage:function(){return t(446)("./".concat(this.path))},imgStyle:function(){var style={width:this.width};return this.margin&&(style.margin=this.margin),style}}},r=(t(560),t(21)),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"img-wrapper",class:{filter:e.useFilter},style:e.imgStyle},[t("img",{attrs:{src:e.dynamicImage,alt:e.alt,width:"100%"}})])}),[],!1,null,"3edfe630",null);n.default=component.exports},,,,,,function(e,n,t){e.exports=t.p+"img/3d_01.074639b.png"},function(e,n,t){e.exports=t.p+"img/3d_02.05bb642.jpg"},function(e,n,t){e.exports=t.p+"img/3d_03.eadc942.jpg"},function(e,n,t){e.exports=t.p+"img/3d_04.a459129.png"},function(e,n,t){e.exports=t.p+"img/3d_05.b7b5085.png"},function(e,n,t){e.exports=t.p+"img/3d_06.02270ef.png"},function(e,n,t){e.exports=t.p+"img/3d_07.1852f83.jpg"},function(e,n,t){e.exports=t.p+"img/3d_08.419af60.jpg"},function(e,n,t){e.exports=t.p+"img/3d_10.4ad387f.jpg"},function(e,n,t){e.exports=t.p+"img/3d_11.e951165.jpg"},function(e,n,t){e.exports=t.p+"img/3d_12.24e8a06.jpg"},function(e,n,t){e.exports=t.p+"img/3d_13.b6d5190.jpg"},function(e,n,t){e.exports=t.p+"img/3d_14.410efcd.png"},function(e,n,t){e.exports=t.p+"img/3d_15.da1b9f9.png"},function(e,n,t){e.exports=t.p+"img/3d_thumb.a459129.png"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_01.47e7a0b.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_02.3f8764b.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_03.820f27f.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_04.7bdf742.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_05.ac551fe.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_06.1ad9a3c.gif"},function(e,n,t){e.exports=t.p+"img/adobe-max-challenge_thumb.39640ac.png"},function(e,n,t){e.exports=t.p+"img/001.4d24168.png"},function(e,n,t){e.exports=t.p+"img/002.37f1799.gif"},function(e,n,t){e.exports=t.p+"img/003.cfeae79.png"},function(e,n,t){e.exports=t.p+"img/004.801a73f.gif"},function(e,n,t){e.exports=t.p+"img/005.0a10882.gif"},function(e,n,t){e.exports=t.p+"img/006.0e546e8.gif"},function(e,n,t){e.exports=t.p+"img/007.b128a27.gif"},function(e,n,t){e.exports=t.p+"img/008.dd24969.gif"},function(e,n,t){e.exports=t.p+"img/009.861f057.gif"},function(e,n,t){e.exports=t.p+"img/010.d200856.gif"},function(e,n,t){e.exports=t.p+"img/011.1e4ff06.gif"},function(e,n,t){e.exports=t.p+"img/012.c4a0604.png"},function(e,n,t){e.exports=t.p+"img/013.4580323.png"},function(e,n,t){e.exports=t.p+"img/014.02bd1db.gif"},function(e,n,t){e.exports=t.p+"img/015.9675caa.gif"},function(e,n,t){e.exports=t.p+"img/016.e4a5c12.gif"},function(e,n,t){e.exports=t.p+"img/017.410ee42.gif"},function(e,n,t){e.exports=t.p+"img/018.57e36e4.gif"},function(e,n,t){e.exports=t.p+"img/019.62f5d38.png"},function(e,n,t){e.exports=t.p+"img/020.c5e9f53.gif"},function(e,n,t){e.exports=t.p+"img/021.c6eb8e4.gif"},function(e,n,t){e.exports=t.p+"img/022.da6aad6.gif"},function(e,n,t){e.exports=t.p+"img/023.4a477f2.gif"},function(e,n,t){e.exports=t.p+"img/024.6a73198.png"},function(e,n,t){e.exports=t.p+"img/025.09d8c3f.gif"},function(e,n,t){e.exports=t.p+"img/026.44ecd7d.gif"},function(e,n,t){e.exports=t.p+"img/027.f40ec56.gif"},function(e,n,t){e.exports=t.p+"img/028.6c76c14.gif"},function(e,n,t){e.exports=t.p+"img/029.03bc835.png"},function(e,n,t){e.exports=t.p+"img/030.a030b3a.gif"},function(e,n,t){e.exports=t.p+"img/031.256db48.gif"},function(e,n,t){e.exports=t.p+"img/032.da64405.png"},function(e,n,t){e.exports=t.p+"img/033.e41f9c8.gif"},function(e,n,t){e.exports=t.p+"img/034.aff2d7c.png"},function(e,n,t){e.exports=t.p+"img/035.c344c79.png"},function(e,n,t){e.exports=t.p+"img/dailyui_thumb.3a44c91.png"},function(e,n,t){e.exports=t.p+"img/lp_01.9f7792a.png"},function(e,n,t){e.exports=t.p+"img/lp_01_thumb.0090a0b.png"},function(e,n,t){e.exports=t.p+"img/lp_02.6d58ec6.jpg"},function(e,n,t){e.exports=t.p+"img/lp_02_thumb.532d429.png"},function(e,n,t){e.exports=t.p+"img/lp_03.d32c824.jpg"},function(e,n,t){e.exports=t.p+"img/lp_03_1.34e6e6d.png"},function(e,n,t){e.exports=t.p+"img/lp_03_2.af2ec59.png"},function(e,n,t){e.exports=t.p+"img/lp_03_3.7fb3889.png"},function(e,n,t){e.exports=t.p+"img/lp_03_4.5e39f99.png"},function(e,n,t){e.exports=t.p+"img/lp_03_5.aea8214.png"},function(e,n,t){e.exports=t.p+"img/lp_03_thumb.f3f8bbc.png"},function(e,n,t){e.exports=t.p+"img/phpcon2021_01.d01a388.jpg"},function(e,n,t){e.exports=t.p+"img/phpcon2021_02.6b054a0.jpg"},function(e,n,t){e.exports=t.p+"img/phpcon2021_03.fc2dfd9.png"},function(e,n,t){e.exports=t.p+"img/phpcon2021_04.20012f8.png"},function(e,n,t){e.exports=t.p+"img/phpcon2021_thumb.062c84a.png"},function(e,n,t){e.exports=t.p+"img/processing_01.7d2abca.gif"},function(e,n,t){e.exports=t.p+"img/processing_01_thumb.75880cd.png"},function(e,n,t){e.exports=t.p+"img/processing_02.ecb20ec.gif"},function(e,n,t){e.exports=t.p+"img/td_01.a585a04.png"},function(e,n,t){e.exports=t.p+"img/td_02.728d81a.png"},function(e,n,t){e.exports=t.p+"img/td_thumb.e87ab8e.png"},function(e,n,t){e.exports=t.p+"img/k_point_01.acf2218.png"},function(e,n,t){e.exports=t.p+"img/k_point_02.c1098cb.png"},function(e,n,t){e.exports=t.p+"img/k_point_03.237149b.png"},function(e,n,t){e.exports=t.p+"img/k_point_04.a41e07f.png"},function(e,n,t){e.exports=t.p+"img/k_point_thumb.ad00c1e.png"},function(e,n,t){e.exports=t.p+"img/kookan_ko_thumb.71fd3da.png"},function(e,n,t){e.exports=t.p+"img/oshavery_thumb.5b445a3.png"},function(e,n,t){e.exports=t.p+"img/web01_01.3bd6c82.png"},function(e,n,t){e.exports=t.p+"img/web02_01.828feb1.gif"},function(e,n,t){e.exports=t.p+"img/web02_02.86e2ebd.png"},function(e,n,t){e.exports=t.p+"img/head_webgl01.684c587.png"},function(e,n,t){e.exports=t.p+"img/webgl01.b00f797.gif"},function(e,n,t){e.exports=t.p+"img/webgl02.15a050b.gif"},function(e,n,t){e.exports=t.p+"img/webgl03.1660b46.gif"},function(e,n,t){e.exports=t.p+"img/webgl04.4a1f37c.gif"},function(e,n,t){e.exports=t.p+"img/webgl05.eafcaf8.gif"},function(e,n,t){e.exports=t.p+"img/webgl_01_thumb.d880a7b.png"},,function(e,n,t){var content=t(561);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(29).default)("2ddad9ae",content,!0,{sourceMap:!1})},,,,,,,,,function(e,n,t){var map={"./blog/20200803.md":447,"./blog/20200805.md":448,"./blog/20200815.md":449,"./blog/20200925.md":450,"./blog/20200926.md":451,"./blog/20201007.md":452,"./blog/20201013.md":453,"./blog/20201014.md":454,"./blog/20201015.md":455,"./blog/20201030.md":456,"./blog/20201221.md":457,"./blog/20210111.md":458,"./blog/20210118.md":459,"./blog/20210121.md":460,"./blog/20210504.md":461,"./blog/20210523.md":462,"./blog/20210531.md":463,"./blog/20210923.md":464,"./blog/20210924.md":465,"./blog/20211005.md":466,"./blog/20211012.md":467,"./blog/20211014.md":468,"./blog/20211102.md":469,"./blog/20211114.md":470,"./blog/20211209.md":471,"./blog/20211218.md":472,"./blog/20211221.md":473,"./blog/20211222.md":474,"./blog/20211228.md":475,"./blog/images/20201007/01.png":476,"./blog/images/20201007/02.png":477,"./blog/images/20201007/03.png":478,"./blog/images/20201007/04.png":479,"./blog/images/20201014/01.png":480,"./blog/images/20201014/02.png":481,"./blog/images/20201014/03.png":482,"./blog/images/20201014/04.png":483,"./blog/images/20201014/05.png":484,"./blog/images/20201014/06.png":485,"./blog/images/20201014/07.png":486,"./blog/images/20201014/08.png":487,"./blog/images/20201014/09.png":488,"./blog/images/20201014/10.png":489,"./blog/images/20201014/11.png":490,"./blog/images/20201014/12.png":491,"./blog/images/20201015/01.png":492,"./blog/images/20201030/01.png":493,"./blog/images/20201030/02.png":494,"./blog/images/20201030/03.png":495,"./blog/images/20201030/04.png":496,"./blog/images/20201030/05.png":497,"./blog/images/20201030/06.png":498,"./blog/images/20201030/07.png":499,"./blog/images/20201030/08.png":500,"./blog/images/20201030/09.png":501,"./blog/images/20210118/01.png":502,"./blog/images/20210504/20210504_01.gif":503,"./blog/images/20210523/20210523_01.png":504,"./blog/images/20210523/20210523_02.png":505,"./blog/images/20210523/20210523_03.png":506,"./blog/images/20210523/20210523_04.png":507,"./blog/images/20210531/20210531_01.png":508,"./blog/images/20210531/20210531_02.png":509,"./blog/images/20210531/20210531_03.png":510,"./blog/images/20210531/20210531_04.png":511,"./blog/images/20210531/phpstorm_thumb.png":512,"./blog/images/20210923/01.png":513,"./blog/images/20211014/20211014_01.png":514,"./blog/images/20211014/20211014_02.png":515,"./blog/images/20211114/20211114_01.png":516,"./blog/images/20211114/20211114_02.png":517,"./blog/images/20211114/20211114_03.png":518,"./blog/images/20211114/20211114_04.png":519,"./blog/images/20211114/20211114_05.png":520,"./blog/images/20211114/20211114_06.png":521,"./blog/images/20211209/20211209_01.png":522,"./blog/images/20211209/20211209_02.png":523,"./blog/images/20211218/01.png":524,"./blog/images/20211218/02.png":525,"./blog/images/20211228/01.png":526,"./blog/images/20211228/02.png":527,"./blog/images/20211228/03.png":528,"./blog/images/20211228/04.png":529,"./blog/images/20211228/05.png":530,"./blog/images/20211228/06.png":531,"./blog/images/20211228/07.png":532,"./blog/images/20211228/08.gif":533,"./blog/images/aws_code_deploy_thumb.png":534,"./blog/images/aws_fargate_thumb.png":535,"./blog/images/aws_thumb.png":536,"./blog/images/blender_thumb.png":537,"./blog/images/firebase_thumb.png":538,"./blog/images/heroku_thumb.png":539,"./blog/images/jest_thumb.png":540,"./blog/images/note_thumb.png":541,"./blog/images/photoshop_thumb.png":542,"./blog/images/php_thumb.png":543,"./blog/images/undefined_thumb.png":544,"./blog/images/vessel_thumb.png":545,"./blog/images/vue_thumb.png":546,"./portfolio/3d01.md":547,"./portfolio/adobe-max-challenge.md":548,"./portfolio/dailyui01.md":549,"./portfolio/images/3d/3d_01.png":339,"./portfolio/images/3d/3d_02.jpg":340,"./portfolio/images/3d/3d_03.jpg":341,"./portfolio/images/3d/3d_04.png":342,"./portfolio/images/3d/3d_05.png":343,"./portfolio/images/3d/3d_06.png":344,"./portfolio/images/3d/3d_07.jpg":345,"./portfolio/images/3d/3d_08.jpg":346,"./portfolio/images/3d/3d_10.jpg":347,"./portfolio/images/3d/3d_11.jpg":348,"./portfolio/images/3d/3d_12.jpg":349,"./portfolio/images/3d/3d_13.jpg":350,"./portfolio/images/3d/3d_14.png":351,"./portfolio/images/3d/3d_15.png":352,"./portfolio/images/3d/3d_thumb.png":353,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_01.gif":354,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_02.gif":355,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_03.gif":356,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_04.gif":357,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_05.gif":358,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_06.gif":359,"./portfolio/images/adobe-max-challenge/adobe-max-challenge_thumb.png":360,"./portfolio/images/dailyui/001.png":361,"./portfolio/images/dailyui/002.gif":362,"./portfolio/images/dailyui/003.png":363,"./portfolio/images/dailyui/004.gif":364,"./portfolio/images/dailyui/005.gif":365,"./portfolio/images/dailyui/006.gif":366,"./portfolio/images/dailyui/007.gif":367,"./portfolio/images/dailyui/008.gif":368,"./portfolio/images/dailyui/009.gif":369,"./portfolio/images/dailyui/010.gif":370,"./portfolio/images/dailyui/011.gif":371,"./portfolio/images/dailyui/012.png":372,"./portfolio/images/dailyui/013.png":373,"./portfolio/images/dailyui/014.gif":374,"./portfolio/images/dailyui/015.gif":375,"./portfolio/images/dailyui/016.gif":376,"./portfolio/images/dailyui/017.gif":377,"./portfolio/images/dailyui/018.gif":378,"./portfolio/images/dailyui/019.png":379,"./portfolio/images/dailyui/020.gif":380,"./portfolio/images/dailyui/021.gif":381,"./portfolio/images/dailyui/022.gif":382,"./portfolio/images/dailyui/023.gif":383,"./portfolio/images/dailyui/024.png":384,"./portfolio/images/dailyui/025.gif":385,"./portfolio/images/dailyui/026.gif":386,"./portfolio/images/dailyui/027.gif":387,"./portfolio/images/dailyui/028.gif":388,"./portfolio/images/dailyui/029.png":389,"./portfolio/images/dailyui/030.gif":390,"./portfolio/images/dailyui/031.gif":391,"./portfolio/images/dailyui/032.png":392,"./portfolio/images/dailyui/033.gif":393,"./portfolio/images/dailyui/034.png":394,"./portfolio/images/dailyui/035.png":395,"./portfolio/images/dailyui/dailyui_thumb.png":396,"./portfolio/images/lp/lp_01.png":397,"./portfolio/images/lp/lp_01_thumb.png":398,"./portfolio/images/lp/lp_02.jpg":399,"./portfolio/images/lp/lp_02_thumb.png":400,"./portfolio/images/lp/lp_03.jpg":401,"./portfolio/images/lp/lp_03_1.png":402,"./portfolio/images/lp/lp_03_2.png":403,"./portfolio/images/lp/lp_03_3.png":404,"./portfolio/images/lp/lp_03_4.png":405,"./portfolio/images/lp/lp_03_5.png":406,"./portfolio/images/lp/lp_03_thumb.png":407,"./portfolio/images/phpcon2021/phpcon2021_01.jpg":408,"./portfolio/images/phpcon2021/phpcon2021_02.jpg":409,"./portfolio/images/phpcon2021/phpcon2021_03.png":410,"./portfolio/images/phpcon2021/phpcon2021_04.png":411,"./portfolio/images/phpcon2021/phpcon2021_thumb.png":412,"./portfolio/images/processing/processing_01.gif":413,"./portfolio/images/processing/processing_01_thumb.png":414,"./portfolio/images/processing/processing_02.gif":415,"./portfolio/images/touchdesigner/td_01.png":416,"./portfolio/images/touchdesigner/td_02.png":417,"./portfolio/images/touchdesigner/td_thumb.png":418,"./portfolio/images/web_service/k_point_01.png":419,"./portfolio/images/web_service/k_point_02.png":420,"./portfolio/images/web_service/k_point_03.png":421,"./portfolio/images/web_service/k_point_04.png":422,"./portfolio/images/web_service/k_point_thumb.png":423,"./portfolio/images/web_service/kookan_ko_thumb.png":424,"./portfolio/images/web_service/oshavery_thumb.png":425,"./portfolio/images/web_service/web01_01.png":426,"./portfolio/images/web_service/web02_01.gif":427,"./portfolio/images/web_service/web02_02.png":428,"./portfolio/images/webgl/head_webgl01.png":429,"./portfolio/images/webgl/webgl01.gif":430,"./portfolio/images/webgl/webgl02.gif":431,"./portfolio/images/webgl/webgl03.gif":432,"./portfolio/images/webgl/webgl04.gif":433,"./portfolio/images/webgl/webgl05.gif":434,"./portfolio/images/webgl/webgl_01_thumb.png":435,"./portfolio/lp-01.md":550,"./portfolio/lp-02.md":551,"./portfolio/lp-03.md":552,"./portfolio/phpcon2021.md":553,"./portfolio/processing.md":554,"./portfolio/touchdesigner.md":555,"./portfolio/web-service-01.md":556,"./portfolio/web-service-02.md":557,"./portfolio/web-service-03.md":558,"./portfolio/webgl.md":559};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(map,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return map[e]}o.keys=function(){return Object.keys(map)},o.resolve=r,e.exports=o,o.id=446},function(e,n){e.exports={attributes:{id:20200805,title:"ECRにDockerイメージをプッシュして、ECSのクラスターをつくって、EC2にコンテナを起動させる為のメモ",description:"vesselで.envのmysqlのパスワードを変更しようとしたとところ、変更できず困ったので。",createdAt:"2020-08-05T00:00:00.000Z",thumbnail:"blog/images/docker_thumb.png",category:"Docker"},html:'<p>ECRにDockerイメージをプッシュして、ECSのクラスターをつくって、EC2にコンテナを起動させる為のメモです。<br>\n自分用のメモなのであまり参考にならないと思います。</p>\n<h2>ローカルで簡単なdockerコンテナを起動する</h2>\n<p>サンプルファイルをcloneする。</p>\n<pre><code>$ git clone https://github.com/aws-samples/ecs-demo-php-simple-app\n</code></pre>\n<p>cloneしたフォルダに移動。</p>\n<pre><code>$ cd ecs-demo-php-simple-app\n</code></pre>\n<p>dockerイメージを作成。</p>\n<pre><code>$ docker build -t amazon-ecs-sample .\n</code></pre>\n<p>コンテナを起動。</p>\n<pre><code>$ docker run -d -p 80:80 --name amazon-ecs-sample amazon-ecs-sample:latest\n</code></pre>\n<p><code>http://localhost/</code>でアクセス。</p>\n<p><dynamic-image path="blog/images/20200805/01.png" alt="ローカルで簡単なdockerコンテナを起動する" ></dynamic-image></p>\n<h2>ECRにdockerイメージをpush</h2>\n<p>AWSコンソールのECS &gt; ECRから、リポジトリを作成する。</p>\n<p><dynamic-image path="blog/images/20200805/02.png" alt="ECRにdockerイメージをpush" ></dynamic-image></p>\n<p>リポジトリが作成されます。<br>\n次に「プッシュコマンドの表示」を押します。</p>\n<p><dynamic-image path="blog/images/20200805/03.png" alt="ECRにdockerイメージをpush" ></dynamic-image></p>\n<p>プッシュコマンドを順番に実行していく。</p>\n<p><dynamic-image path="blog/images/20200805/04.png" alt="ECRにdockerイメージをpush" ></dynamic-image></p>\n<ol>\n<li>認証トークンを取得し、レジストリに対して Docker クライアントを認証します。\nAWS CLI を使用します。</li>\n</ol>\n<pre><code>aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin XXXXXXXXXXX.dkr.ecr.ap-northeast-1.amazonaws.com\n</code></pre>\n<ol start="2">\n<li>以下のコマンドを使用して、Docker イメージを構築します。</li>\n</ol>\n<pre><code>docker build -t amazon-ecs-sample .\n</code></pre>\n<ol start="3">\n<li>構築が完了したら、このリポジトリにイメージをプッシュできるように、イメージにタグを付けます。</li>\n</ol>\n<pre><code>docker tag amazon-ecs-sample:latest XXXXXXXXXXX.dkr.ecr.ap-northeast-1.amazonaws.com/amazon-ecs-sample:latest\n</code></pre>\n<ol start="4">\n<li>以下のコマンドを実行して、新しく作成した AWS リポジトリにこのイメージをプッシュします。</li>\n</ol>\n<pre><code>docker push XXXXXXXXXXX.dkr.ecr.ap-northeast-1.amazonaws.com/amazon-ecs-sample:latest\n</code></pre>\n<p>リポジトリ内にイメージが作成される。</p>\n<p><dynamic-image path="blog/images/20200805/05.png" alt="ECRにdockerイメージをpush" ></dynamic-image></p>\n<h2>タスクを定義する</h2>\n<p>EC2でコンテナを起動させるにはタスクを定義する必要があります。<br>\nタスクとは複数のコンテナをグループにしたものです。<br>\ndocker-compose.ymlに似ている。\n起動するコンテナが1つでも複数でも定義が必要になる。</p>\n<p>タスクはjsonファイルで登録することができるので、以下のサンプルを利用します。\nhttps://github.com/aws-samples/ecs-demo-php-simple-app/blob/master/simple-app-task-def.json</p>\n<p>◎ simple-app-task-def.json</p>\n<pre><code>{\n    &quot;family&quot;: &quot;console-sample-app&quot;,\n    &quot;volumes&quot;: [\n        {\n            &quot;name&quot;: &quot;my-vol&quot;,\n            &quot;host&quot;: {}\n        }\n    ],\n    &quot;containerDefinitions&quot;: [\n        {\n            &quot;environment&quot;: [],\n            &quot;name&quot;: &quot;simple-app&quot;,\n            &quot;image&quot;: &quot;{ECRにアップロードしたイメージ}&quot;,\n            &quot;cpu&quot;: 10,\n            &quot;memory&quot;: 500,\n            &quot;portMappings&quot;: [\n                {\n                    &quot;containerPort&quot;: 80,\n                    &quot;hostPort&quot;: 80\n                }\n            ],\n            &quot;mountPoints&quot;: [\n                {\n                    &quot;sourceVolume&quot;: &quot;my-vol&quot;,\n                    &quot;containerPath&quot;: &quot;/var/www/my-vol&quot;\n                }\n            ],\n            &quot;entryPoint&quot;: [\n                &quot;/usr/sbin/apache2&quot;,\n                &quot;-D&quot;,\n                &quot;FOREGROUND&quot;\n            ],\n            &quot;essential&quot;: true\n        },\n        {\n            &quot;name&quot;: &quot;busybox&quot;,\n            &quot;image&quot;: &quot;busybox&quot;,\n            &quot;cpu&quot;: 10,\n            &quot;memory&quot;: 500,\n            &quot;volumesFrom&quot;: [\n            {\n              &quot;sourceContainer&quot;: &quot;simple-app&quot;\n            }\n            ],\n            &quot;entryPoint&quot;: [\n                &quot;sh&quot;,\n                &quot;-c&quot;\n            ],\n            &quot;command&quot;: [\n                &quot;/bin/sh -c \\&quot;while true; do /bin/date &gt; /var/www/my-vol/date; sleep 1; done\\&quot;&quot;\n            ],\n            &quot;essential&quot;: false\n        }\n    ]\n}\n</code></pre>\n<p>タスクを登録する。</p>\n<pre><code>aws ecs register-task-definition --cli-input-json file://simple-app-task-def.json\n</code></pre>\n<p><code>&quot;family&quot;: &quot;console-sample-app&quot;</code>に定義した<code>console-sample-app</code>というタスクが作成されます。</p>\n<p><dynamic-image path="blog/images/20200805/06.png" alt="タスクを定義する" ></dynamic-image></p>\n<h2>クラスターを作成</h2>\n<p>クラスターとは、タスクを配置するEC2インスタンス群のこと。タスクの実行環境になります。</p>\n<p>イメージとしてはこんな感じ（自信なし）？？</p>\n<p><dynamic-image path="blog/images/20200805/07.png" alt="クラスターを作成" ></dynamic-image></p>\n<h3>クラスターの作成手順</h3>\n<p>ECS &gt; クラスターから「クラスターを作成」を押す。</p>\n<p>「EC2 Linux + ネットワーキング」を選択して「次のステップ」を押す。</p>\n<p>とりあえず以下の設定して「作成」を押す。</p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>クラスター名</td>\n<td>sample-cluster</td>\n</tr>\n<tr>\n<td>EC2 インスタンスタイプ</td>\n<td>t2.micro</td>\n</tr>\n<tr>\n<td>インスタンス数</td>\n<td>2</td>\n</tr>\n<tr>\n<td>キーペア</td>\n<td>作成したもの</td>\n</tr>\n</tbody>\n</table>\n<p>クラスターが作成される。</p>\n<p><dynamic-image path="blog/images/20200805/08.png" alt="クラスターを作成" ></dynamic-image></p>\n<h3>クラスターでタスクを実行</h3>\n<p>タブの「タスク」から「新しいタスクの実行」を押す。</p>\n<p><dynamic-image path="blog/images/20200805/09.png" alt="クラスターでタスクを実行" ></dynamic-image></p>\n<p>以下の設定をして「タスクの実行」を押す。</p>\n<p><dynamic-image path="blog/images/20200805/10.png" alt="クラスターでタスクを実行" ></dynamic-image></p>\n<p>タスクが実行されインスタンスが作成されます。</p>\n<p><dynamic-image path="blog/images/20200805/11.png" alt="クラスターでタスクを実行" ></dynamic-image></p>\n<p>インスタンスのパブリックDNSでアクセスしてみると、以下の画面が表示されます。</p>\n<p><dynamic-image path="blog/images/20200805/12.png" alt="クラスターでタスクを実行" ></dynamic-image></p>\n'}},function(e,n){e.exports={attributes:{id:20200815,title:"vesselでmysqlのパスワードを変更しようとして困ったメモ",description:"vesselで.envのmysqlのパスワードを変更しようとしたとところ、変更できず困ったので。",createdAt:"2020-08-15T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Mysql"},html:'<p>vesselで.envのmysqlのパスワードを変更しようとしたとところ、変更できず困ったのでメモを残しておく。\nそもそもDockerを正しく理解できていない。</p>\n<p>ともかく、以下を参照したらできた。<br>\nvolumeを削除しないとだめなのかな。。。</p>\n<p><a href="https://vessel.shippingdocker.com/docs/common-issues/">Vessel - Docker dev environments for Laravel</a></p>\n<pre><code># Spin down the containers\n./vessel stop\n\n# Destroy the volume created\n## List volumes to find it\ndocker volume ls\n## Destroy the appropriate one\ndocker volume rm vesselexample_vesselmysql\n\n# Set a password within the .env file\nDB_PASSWORD=secret\n\n# Start the containers back up\n./vessel start\n</code></pre>\n<p>ログインして試してみたら、パスワードが変更されていた。</p>\n<pre><code>./vessel exec mysql mysql -u root -p\n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20200925,title:"Mysql接続に関して困ったことメモ",description:"サーバーやインフラの知識は素人同然なので間違いや、説明不足が多いと思います。また、ハマりそうなので自分用のメモです。",createdAt:"2020-09-25T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Mysql"},html:"<p>サーバーやインフラの知識は素人同然なので間違いや、説明不足が多いと思います。<br>\nまた、ハマりそうなので自分用のメモです。</p>\n<h3>前提</h3>\n<ul>\n<li>Laravelを利用</li>\n<li>MySQL8.0.xを利用</li>\n<li>EC2にDBサーバーをたてる</li>\n</ul>\n<h2>問題</h2>\n<p>ローカル環境では問題なくDB(mysql)に接続できていた。<br>\nEC2にSSH接続はできている。<br>\nmysqlコマンドでデータベースへログインもてきている。<br>\nLaravel <code>php artisan migrate</code>を実行するとエラーになる。</p>\n<h2>.envの設定</h2>\n<pre><code>DB_CONNECTION=mysql\nDB_HOST=10.0.0.69 # EC2のプライベートIPアドレス\nDB_PORT=3306\nDB_DATABASE=db\nDB_USERNAME=root\nDB_PASSWORD=password\n</code></pre>\n<h2>ユーザーを確認</h2>\n<p>EC2上でmysqlにログイン。<br>\nユーザー情報を確認。</p>\n<pre><code>mysql&gt; SELECT user, host, plugin FROM mysql.user;\n+------------------+-----------+-----------------------+\n| user             | host      | plugin                |\n+------------------+-----------+-----------------------+\n| mysql.infoschema | localhost | caching_sha2_password |\n| mysql.session    | localhost | caching_sha2_password |\n| mysql.sys        | localhost | caching_sha2_password |\n| root             | localhost | caching_sha2_password |\n+------------------+-----------+-----------------------+\n</code></pre>\n<p>ローカル環境と少し違う。<br>\nローカル環境はこんな感じだった。</p>\n<pre><code>+---------------+-----------+-----------------------+\n| user          | host      | plugin                |\n+---------------+-----------+-----------------------+\n| root          | localhost | mysql_native_password |\n| mysql.session | localhost | mysql_native_password |\n| mysql.sys     | localhost | mysql_native_password |\n| root          | %         | mysql_native_password |\n| default       | %         | mysql_native_password |\n+---------------+-----------+-----------------------+\n</code></pre>\n<h2>ユーザーを作成して、権限や認証方式を変更</h2>\n<p>ローカル環境に合わせてユーザーの追加や、権限や認証方式を変更していく。</p>\n<h4>◎ユーザーを追加</h4>\n<p>hostが<code>localhost</code>だと外部からの接続ができない。<br>\n外部からの接続ができる<code>%</code>を指定する。</p>\n<pre><code>create user 'root'@'%' identified by 'password';\n</code></pre>\n<h4>◎権限を変更</h4>\n<p>dbデータベースへのアクセスを許可する。</p>\n<pre><code>grant all privileges on db.* to 'root'@'%';\n</code></pre>\n<h4>◎認証方式の変更</h4>\n<p><a href=\"https://qiita.com/ucan-lab/items/3ae911b7e13287a5b917\">MySQL8.0 認証方式を変更する(Laravel5)</a>を参考にする。</p>\n<blockquote>\n<p>MySQL8.0.4以降 のログイン認証方式は caching_sha2_password がデフォルト<br>\nPHPのMySQL接続ライブラリがcaching_sha2_passwordに未対応のため接続不可\n解決策としては認証方式をmysql_native_password に戻す</p>\n</blockquote>\n<pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\nmysql&gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\n</code></pre>\n<p><code>/etc/my.cnf</code>に以下を追記。(コメントアウトしてあったので表示しただけ)</p>\n<pre><code>default_authentication_plugin=mysql_native_password\n</code></pre>\n<h2>まとめ</h2>\n<p>ローカルで利用しているdockerファイルで環境を構築すればこんな問題はおこらなかったのかも。。。</p>\n"}},function(e,n){e.exports={attributes:{id:20200925,title:"Mysql接続に関して困ったことメモ",description:"サーバーやインフラの知識は素人同然なので間違いや、説明不足が多いと思います。また、ハマりそうなので自分用のメモです。",createdAt:"2020-09-25T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Mysql"},html:"<p>サーバーやインフラの知識は素人同然なので間違いや、説明不足が多いと思います。<br>\nまた、ハマりそうなので自分用のメモです。</p>\n<h3>前提</h3>\n<ul>\n<li>Laravelを利用</li>\n<li>MySQL8.0.xを利用</li>\n<li>EC2にDBサーバーをたてる</li>\n</ul>\n<h2>問題</h2>\n<p>ローカル環境では問題なくDB(mysql)に接続できていた。<br>\nEC2にSSH接続はできている。<br>\nmysqlコマンドでデータベースへログインもてきている。<br>\nLaravel <code>php artisan migrate</code>を実行するとエラーになる。</p>\n<h2>.envの設定</h2>\n<pre><code>DB_CONNECTION=mysql\nDB_HOST=10.0.0.69 # EC2のプライベートIPアドレス\nDB_PORT=3306\nDB_DATABASE=db\nDB_USERNAME=root\nDB_PASSWORD=password\n</code></pre>\n<h2>ユーザーを確認</h2>\n<p>EC2上でmysqlにログイン。<br>\nユーザー情報を確認。</p>\n<pre><code>mysql&gt; SELECT user, host, plugin FROM mysql.user;\n+------------------+-----------+-----------------------+\n| user             | host      | plugin                |\n+------------------+-----------+-----------------------+\n| mysql.infoschema | localhost | caching_sha2_password |\n| mysql.session    | localhost | caching_sha2_password |\n| mysql.sys        | localhost | caching_sha2_password |\n| root             | localhost | caching_sha2_password |\n+------------------+-----------+-----------------------+\n</code></pre>\n<p>ローカル環境と少し違う。<br>\nローカル環境はこんな感じだった。</p>\n<pre><code>+---------------+-----------+-----------------------+\n| user          | host      | plugin                |\n+---------------+-----------+-----------------------+\n| root          | localhost | mysql_native_password |\n| mysql.session | localhost | mysql_native_password |\n| mysql.sys     | localhost | mysql_native_password |\n| root          | %         | mysql_native_password |\n| default       | %         | mysql_native_password |\n+---------------+-----------+-----------------------+\n</code></pre>\n<h2>ユーザーを作成して、権限や認証方式を変更</h2>\n<p>ローカル環境に合わせてユーザーの追加や、権限や認証方式を変更していく。</p>\n<h4>◎ユーザーを追加</h4>\n<p>hostが<code>localhost</code>だと外部からの接続ができない。<br>\n外部からの接続ができる<code>%</code>を指定する。</p>\n<pre><code>create user 'root'@'%' identified by 'password';\n</code></pre>\n<h4>◎権限を変更</h4>\n<p>dbデータベースへのアクセスを許可する。</p>\n<pre><code>grant all privileges on db.* to 'root'@'%';\n</code></pre>\n<h4>◎認証方式の変更</h4>\n<p><a href=\"https://qiita.com/ucan-lab/items/3ae911b7e13287a5b917\">MySQL8.0 認証方式を変更する(Laravel5)</a>を参考にする。</p>\n<blockquote>\n<p>MySQL8.0.4以降 のログイン認証方式は caching_sha2_password がデフォルト<br>\nPHPのMySQL接続ライブラリがcaching_sha2_passwordに未対応のため接続不可\n解決策としては認証方式をmysql_native_password に戻す</p>\n</blockquote>\n<pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\nmysql&gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\n</code></pre>\n<p><code>/etc/my.cnf</code>に以下を追記。(コメントアウトしてあったので表示しただけ)</p>\n<pre><code>default_authentication_plugin=mysql_native_password\n</code></pre>\n<h2>まとめ</h2>\n<p>ローカルで利用しているdockerファイルで環境を構築すればこんな問題はおこらなかったのかも。。。</p>\n"}},function(e,n){e.exports={attributes:{id:20200926,title:"vesselで作ったローカルの開発環境をEC2にそのまま作る手順のメモ",description:"vesselで作ったらローカルの開発環境を、EC2にそのまま作る手順のメモです。",createdAt:"2020-09-26T00:00:00.000Z",thumbnail:"blog/images/vessel_thumb.png",category:"Docker"},html:'<p>vesselで作ったらローカルの開発環境を、EC2にそのまま作る手順のメモです。<br>\n自分用のメモなので参考にならないかもしれません。</p>\n<h2>前提</h2>\n<p>ローカル環境はvesselを使って作成。<br>\n作成方法は<a href="https://www.nogson.blog/entry/2020/07/11/110515">こちら</a>を参考に。</p>\n<h2>EC2にLaravelのプロジェクトファイルをcloneする</h2>\n<p>EC2に接続。</p>\n<pre><code>$ ssh -i {keypair} ec2-user@{パブリックアドレス}\n</code></pre>\n<p>vesselで環境を作るので、dockerをインストール。</p>\n<pre><code>$ sudo yum update -y\n$ sudo yum install -y docker\n$ sudo systemctl start docker.service\n$ sudo systemctl enable docker.service\n$ sudo usermod -a -G docker ec2-user\n</code></pre>\n<p>docker-composeもインストール。<br>\n<a href="https://docs.docker.com/compose/install/#install-compose">Install Docker Compose | Docker Documentation</a>のLinuxを参考。</p>\n<pre><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<p>phpをインストール。</p>\n<pre><code>$ sudo amazon-linux-extras install php7.3\n$ sudo yum install php-cli php-xml php-json php-mbstring php-process php-common php-fpm php-zip php-mysqlnd -y\n</code></pre>\n<p>composerをインストール。</p>\n<pre><code>$ sudo curl -sS https://getcomposer.org/installer | php\n$ sudo mv composer.phar /usr/local/bin/composer\n</code></pre>\n<p>vesselをインストールする場合にメモリ不足になる場合があるので、以下を実行。</p>\n<pre><code>$ sudo dd if=/dev/zero of=/swapfile bs=1M count=1024\n$ sudo chmod 600 /swapfile\n$ sudo mkswap /swapfile\n$ sudo swapon /swapfile\n</code></pre>\n<p>gitのインストール。</p>\n<pre><code>$ sudo yum install git\n</code></pre>\n<p>ファイルをgit cloneする。</p>\n<pre><code>$ sudo git clone {gitのurl}\n</code></pre>\n<p>cloneしたファイルの権限を変更。</p>\n<pre><code>sudo chmod -R 777 {colneしたファイル}\n</code></pre>\n<p>cloneしたファイルへ移動。</p>\n<pre><code>$ cd {colneしたファイル}\n</code></pre>\n<p>.envを作成</p>\n<pre><code>cp .env.example .env\n</code></pre>\n<p>mysqlのhostを変更</p>\n<pre><code>DB_CONNECTION=mysql\nDB_HOST=10.0.0.200 #インスタンスのプライベートIP\nDB_PORT=3306\nDB_DATABASE=db\nDB_USERNAME=root\nDB_PASSWORD=secret\n</code></pre>\n<p>./vesselのインストールとセットアップ。</p>\n<pre><code>$ composer require shipping-docker/vessel\n# dockerフォルダ配下にイメージ用のapp、mysql、nodeなどが作成済みの場合は以下は不要\n$ php artisan vendor:publish --provider=&quot;Vessel\\VesselServiceProvider&quot;\n$ bash vessel init\n$ ./vessel start\n</code></pre>\n<p><code>docker -ps</code>でコンテナが立ち上がっているかを確認してマイグレーションを実行。<br>\n※ これはDBとマイグレーションを利用している場合のみ。</p>\n<pre><code>./vessel php artisan migrate\n</code></pre>\n<p>コンテナが立ち上がっていなかったら、以下を実行。</p>\n<pre><code>./vessel up -d\n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20201007,title:"herokuを利用してnuxtをSSRでホスティングするメモ",description:"herokuを利用してnuxtをSSRでホスティングするメモです。",createdAt:"2020-10-07T00:00:00.000Z",thumbnail:"blog/images/heroku_thumb.png",category:"Heroku"},html:'<p>herokuを利用してnuxtをSSRでホスティングする。</p>\n<p>nuxtプロジェクトを作成する。<br>\nプロジェクトはSSRで作成する。</p>\n<pre><code>$ yarn create nuxt-app sampleApp\n$ cd sampleApp\n</code></pre>\n<p>SSRを試したいので、<code>/pages</code>配下に<code>sub/_id.vue</code>を作成する。</p>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;sub&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \'Id\'\n}\n&lt;/script&gt;\n</code></pre>\n<p>ビルドする。</p>\n<pre><code>$ yarn build\n</code></pre>\n<p><code>package.json</code>を変更。<br>\nheroku-prebuild後に実行されるコマンドを<code>heroku-postbuild</code>に指定する。</p>\n<pre><code>  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;nuxt&quot;,\n    &quot;build&quot;: &quot;nuxt build&quot;,\n    &quot;start&quot;: &quot;nuxt start&quot;,\n    &quot;generate&quot;: &quot;nuxt generate&quot;,\n    &quot;heroku-postbuild&quot;: &quot;npm run build&quot; // + 追加\n  },\n</code></pre>\n<p>Heroku CLIをインストール。</p>\n<pre><code>$ brew tap heroku/brew &amp;&amp; brew install heroku\n</code></pre>\n<p>Herokuにアプリを作成。</p>\n<p><dynamic-image path="blog/images/20201007/01.png" alt="herokuを利用してnuxtをSSRでホスティングする" ></dynamic-image></p>\n<p>環境変数を設定。</p>\n<pre><code>HOST : 0.0.0.0\n</code></pre>\n<p><dynamic-image path="blog/images/20201007/02.png" alt="herokuを利用してnuxtをSSRでホスティングする" ></dynamic-image></p>\n<p>herokuにログインする。<br>\nブラウザが立ち上がるのでログインする。</p>\n<pre><code>$ heroku login\n</code></pre>\n<p>gitに登録。</p>\n<pre><code>$ heroku git:remote -a sampleapp201007\n</code></pre>\n<p>herokuにプッシュ。</p>\n<pre><code>$ git add .\n$ git commit -m \'initial commit\'\n$ git push heroku master\n</code></pre>\n<p>herokuのコンソールからアプリを表示。</p>\n<p><dynamic-image path="blog/images/20201007/03.png" alt="herokuを利用してnuxtをSSRでホスティングする" ></dynamic-image></p>\n<p>subページも表示。</p>\n<p><dynamic-image path="blog/images/20201007/04.png" alt="herokuを利用してnuxtをSSRでホスティングする" ></dynamic-image></p>\n'}},function(e,n){e.exports={attributes:{id:20201013,title:"EC2のApacheでBASIC認証、DIGEST認証メモ",description:"EC2のApacheでBASIC認証、DIGEST認証メモです。",createdAt:"2020-10-13T00:00:00.000Z",thumbnail:"blog/images/aws_thumb.png",category:"AWS"},html:"<p>EC2にssh接続後の手順。</p>\n<p>Apacheをインストール。</p>\n<pre><code>$ sudo yum update\n$ sudo yum install httpd -y\n$ sudo chkconfig httpd on\n</code></pre>\n<h3>BASIC認証</h3>\n<p>ユーザー名とパスワードを設定する。</p>\n<pre><code>sudo htpasswd -c -b /etc/httpd/conf/.htpasswd {user} {password}\n</code></pre>\n<p><code>/etc/httpd/conf/httpd.conf</code>に以下を追加。</p>\n<pre><code>&lt;Directory &quot;/var/www/html/&quot;&gt;\n  AuthUserFile /etc/httpd/conf/.htpasswd\n  AuthGroupFile /dev/null\n  AuthName &quot;Basic Auth&quot;\n  AuthType Basic\n  Require valid-user\n&lt;/Directory&gt;\n</code></pre>\n<p>Apacheを起動。</p>\n<pre><code>$ sudo service httpd start\n</code></pre>\n<h3>DIGEST認証</h3>\n<p>ユーザー名とパスワードを設定する。</p>\n<pre><code>// htdigest -c /etc/httpd/conf/.digestpass &quot;{領域名}&quot; {user}\n$ htdigest -c /etc/httpd/conf/.digestpass &quot;Digest Auth&quot; useri\n\nNew password： {password}\nRe-type new password： {password}\n</code></pre>\n<p><code>/etc/httpd/conf/httpd.conf</code>に以下を追加。</p>\n<pre><code>&lt;Directory &quot;/var/www/html&quot;&gt;\n    AuthType Digest\n    AuthName &quot;Digest Auth&quot;\n    AuthUserFile &quot;/etc/httpd/conf/.digestpass&quot;\n    Require valid-user\n&lt;/Directory&gt;\n</code></pre>\n<p>Apacheを起動。</p>\n<pre><code>$ sudo service httpd start\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:20201014,title:"ECS Fargateにdockerイメージを利用してコンテナを立ててみる為のメモ",description:"ECS Fargateにdockerイメージを利用してコンテナを立ててみる為のメモです。自分用のメモなので、手順だけ書いています。",createdAt:"2020-10-14T00:00:00.000Z",thumbnail:"blog/images/aws_fargate_thumb.png",category:"AWS"},html:'<p>ECS Fargateにdockerイメージを利用してコンテナを立ててみる為のメモです。<br>\n自分用のメモなので、手順だけ書いています。</p>\n<h2>前提</h2>\n<p>VPCやサブネットは作成ずみ。</p>\n<h2>dockerイメージを作成する</h2>\n<p>適当なフォルダを作成。</p>\n<pre><code>$ mkdir ecs_sample\n$ cd ecs_sample\n</code></pre>\n<p>Dockerfileを作成。<br>\nnginxのdockerコンテナを作成する為のイメージ。</p>\n<pre><code>FROM nginx:latest\n\nCOPY ./src /usr/share/nginx/html\n</code></pre>\n<p>srcディレクトリと表示確認用にhtmlを作成。</p>\n<pre><code>$ mkdir src\n</code></pre>\n<p><code>src/index.html</code>の中身は何でもよい。</p>\n<pre><code>Hello!\n</code></pre>\n<p>dockerイメージを作成する。</p>\n<pre><code>$ docker build . -t ecs-test$\n</code></pre>\n<p>イメージが作成できているか確認。</p>\n<pre><code>$ docker images\n\nREPOSITORY                                                            TAG                 IMAGE ID            CREATED             SIZE\necs-test                                                              latest              7fdbd8fef5df        26 seconds ago      132MB\n</code></pre>\n<p>ローカルでdockerイメージからコンテナを起動してみる。<br>\nオプションの<code>--rm</code>はコンテナを停止したら、コンテナを削除する指定。</p>\n<pre><code>$ docker run --rm -p 8080:80 ecs-test -d\n</code></pre>\n<p><code>http://localhost:8080/</code>で「Hello!」と表示されていればOK。</p>\n<h2>ECRにイメージを登録</h2>\n<p>作成したdockerイメージをECRに登録します。<br>\nECRに登録したイメージはECSから利用することができます。</p>\n<p>まずは登録用のリポジトリを作成(githubのリポジトリみたいなもの)。</p>\n<p><dynamic-image path="blog/images/20201014/01.png" alt="ECRにイメージを登録" ></dynamic-image></p>\n<p>作成したリポジトリに、イメージをpushします。<br>\npush方法は、「プッシュコマンドを表示」のコマンドを実行していくだけです。</p>\n<p><dynamic-image path="blog/images/20201014/02.png" alt="ECRにイメージを登録" ></dynamic-image></p>\n<p>イメージがプッシュされるとリポジトリに以下のように表示されます。</p>\n<p><dynamic-image path="blog/images/20201014/03.png" alt="ECRにイメージを登録" ></dynamic-image></p>\n<h2>ECSを作成</h2>\n<h3>クラスターを作成</h3>\n<p><code>クラスター &gt; クラスターを作成 &gt; ネットワーキングのみ(AWS Fargateを使用)</code>を選択して「次のステップへ」</p>\n<p>クラスター名と、タグだけ設定して「作成」。</p>\n<p><dynamic-image path="blog/images/20201014/04.png" alt="クラスターを作成" ></dynamic-image></p>\n<p>クラスターが作成される。</p>\n<p><dynamic-image path="blog/images/20201014/05.png" alt="クラスターを作成" ></dynamic-image></p>\n<h3>タスクを作成</h3>\n<p>タスクとはdocker-composeみたいなもの。</p>\n<p><code>タスク定義 &gt; 新しいタスク定義を作成 &gt; FARGATE</code>を選択して「次のステップへ」。</p>\n<p>タスクの設定はこんな感じ。<br>\nタスクの実行 IAM ロールは初めての場合は、「新しいロールを作成」を選択すると自動で「ecsTaskExecutionRole」ロールが作成される。</p>\n<p><dynamic-image path="blog/images/20201014/06.png" alt="タスクを作成" ></dynamic-image></p>\n<p>コンテナを追加します。<br>\nイメージには、ECRで登録したイメージのURI、\nもしくは<code>ngins:latest</code>のようにdocker hubにあるイメージを指定することもできる。</p>\n<p><dynamic-image path="blog/images/20201014/07.png" alt="タスクを作成" ></dynamic-image></p>\n<p>タグ(Name:ecs-sample-taskとか）だけ追加して「作成」ボタンを押す。</p>\n<h3>サービスを作成する</h3>\n<p>サービスはクラスターとタスク定義を結びつけるようなもの。</p>\n<p>クラスター &gt; 作成したクラスタ &gt; 「サービス」タブ &gt; 「作成」を押す。</p>\n<p><dynamic-image path="blog/images/20201014/08.png" alt="サービスを作成する" ></dynamic-image></p>\n<p>以下のような設定をして 「次のステップへ」を押す。</p>\n<p><dynamic-image path="blog/images/20201014/09.png" alt="サービスを作成する" ></dynamic-image></p>\n<p>VPCやサブネット、セキュリティグループ(インターネットにつながる）を設定して「次のステップへ」を押す。</p>\n<p><dynamic-image path="blog/images/20201014/10.png" alt="サービスを作成する" ></dynamic-image></p>\n<p>Auto Scaling はそのままの設定で「次のステップへ」を押し「サービスの作成」を押す。</p>\n<p>サービスが作成され、「タスク」が起動します。<br>\nコンテナが起動すると、ステータスがRUNNINGになります。</p>\n<p><dynamic-image path="blog/images/20201014/11.png" alt="サービスを作成する" ></dynamic-image></p>\n<p>タスクのパブリックIPから表示を確認することができます。</p>\n<p><dynamic-image path="blog/images/20201014/12.png" alt="サービスを作成する" ></dynamic-image></p>\n'}},function(e,n){e.exports={attributes:{id:20201015,title:"クロスドメインでBasic認証を自動ログインさせるメモ",description:"あまり無いと思いますが、クロスドメインでベーシック認証をする必要があったので、忘れないようにメモしておきます。",createdAt:"2020-10-15T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Other"},html:"<p>あまり無いと思いますが、クロスドメインでベーシック認証をする必要があったので、<br>\n忘れないようにメモしておきます。</p>\n<p>仕組みとしては以下のイメージ。</p>\n<ol>\n<li>クライアント(表示元)にiframeを埋める。</li>\n<li>iframeのsrcにベーシック認証先のサーバーに配置したcgiファイルを指定する</li>\n<li>cgiでクライアント(表示元)のjsを呼び出す。</li>\n<li>クライアント(表示元)のjsでベーシック認証を行う。</li>\n</ol>\n<p>※ 手順3のcgiでベーシック認証を行っても良いかも</p>\n<p><dynamic-image path=\"blog/images/20201015/01.png\" alt=\"クロスドメインでBasic認証を自動ログイン\" ></dynamic-image></p>\n<h2>CGIを追加</h2>\n<p><code>/etc/httpd/conf/httpd.conf</code>に以下を追加。</p>\n<pre><code>ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;\n\n&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;\n   AllowOverride None\n   Options None\n   Order allow,deny\n   Allow from all\n&lt;/Directory&gt;\n</code></pre>\n<p><code>/var/www/cgi-bin</code>にcgiファイルを配置。</p>\n<pre><code>vi /var/www/cgi-bin/authentication.cgi\n</code></pre>\n<p>中身はこんな感じ。</p>\n<pre><code>#!/usr/bin/perl --\nprint &quot;Content-type: text/html\\n\\n&quot;;\nprint &quot;&lt;html&gt;&lt;head&gt;\\n&quot;;\nprint &quot;&lt;script type=\\&quot;text/javascript\\&quot; src=\\&quot;http://hoge.co.jp/authentication.js\\&quot;&gt;&lt;/script&gt;\\n&quot;;\nprint &quot;&lt;/head&gt;&lt;/html&gt;\\n&quot;;\nexit;\n</code></pre>\n<p>該当のcgiファイルの権限を変更。</p>\n<pre><code>chmod 755 authentication.cgi\n</code></pre>\n<p>クライアント(http://hoge.co.jp)にjsフィアルを用意。\nベーシック認証用のスクリプトを用意する。\n※第3引数のasyncはtrue (非同期) or false (同期)は要件によって。</p>\n<pre><code>(function () {\n  const xhr = new XMLHttpRequest()\n  xhr.open(&quot;GET&quot;, &quot;http://fuga.com&quot;,\n    false, &quot;user&quot;, &quot;password&quot;)\n  xhr.send(null);\n}());\n</code></pre>\n<p>ただし、上記だと通信内容にログイン情報が出てしまうので、リクエストヘッダーの<code>Authorization</code>を利用することで少し隠蔽することができます。</p>\n<pre><code>(function() {\n  const xhr = new XMLHttpRequest()\n  const authorizationBasic = window.btoa('user' + ':' + 'password')\n  xhr.open('GET', 'http://fuga.com&quot;', false)\n  xhr.setRequestHeader('Authorization', 'Basic ' + authorizationBasic)\n  xhr.send(null)\n})()\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:2021030,title:"CodeDeployと CodePipelineを使ってEC2に自動デプロイのメモ",description:"自動でEC2にソースをデプロイにチャレンジです。次回やるときの為ののメモです。",createdAt:"2020-10-30T00:00:00.000Z",thumbnail:"blog/images/aws_code_deploy_thumb.png",category:"AWS"},html:'<p>自動でEC2にソースをデプロイにチャレンジです。<br>\n次回やるときの為ののメモです。</p>\n<h2>自動デプロイの流れ</h2>\n<p>違うかもしれませんが、やりたいことはこんなイメージです。</p>\n<ol>\n<li>githubにpush</li>\n<li>CodePipelineをが起動</li>\n<li>codeDeployがEC2にpush</li>\n</ol>\n<h2>EC2の設定</h2>\n<h3>CodeDeploy エージェントをインストールする</h3>\n<p>そのままではCodeDeployからEC2が操作できないのでAgentを追加する必要がある。</p>\n<p><a href="https://docs.aws.amazon.com/ja_jp/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html">Amazon Linux 用または RHEL 用の CodeDeploy エージェントをインストールする - AWS CodeDeploy</a></p>\n<pre><code>$ sudo yum update\n$ sudo yum install ruby\n$ sudo yum install wget\n$ cd /home/ec2-user\n// アジアパシフィック (東京)の場合\n// wget https://aws-codedeploy-ap-northeast-1.s3.ap-northeast-1.amazonaws.com/latest/install\n$ wget https://{bucket-name}.s3.{region-identifier}.amazonaws.com/latest/install\n$ chmod +x ./install\n$ sudo ./install auto\n</code></pre>\n<p>サービスが正しく実行されているかは以下のコマンドで確認。</p>\n<pre><code>$ sudo service codedeploy-agent status\n</code></pre>\n<p>実行されていない場合、デプロイ時に以下のようなエラーが発生する。</p>\n<blockquote>\n<p>The overall deployment failed because too many individual instances failed deployment, too few healthy instances are available for deployment, or some instances in your deployment group are experiencing problems.</p>\n</blockquote>\n<h2>クライアント側の設定</h2>\n<p>CodeDeployには<code>appspec.yml</code>が必要で、同期させるファイルのルートに配置する必要がある。</p>\n<pre><code>version: 0.0\nos: linux\nfiles:\n    - source: /index.html\n      destination: /var/www/html/\nhooks:\n  BeforeInstall:\n    - location: scripts/install_dependencies\n      timeout: 300\n      runas: root\n    - location: scripts/start_server\n      timeout: 300\n      runas: root\n  ApplicationStop:\n    - location: scripts/stop_server\n      timeout: 300\n      runas: root\n</code></pre>\n<ul>\n<li>files\n<ul>\n<li>source : 同期元</li>\n<li>destination : 同期先</li>\n</ul>\n</li>\n<li>hooks\n<ul>\n<li>BeforeInstall(例) : イベント名\n<ul>\n<li>location : イベントで実行するファイル（場所）</li>\n<li>timeout : 実行時間</li>\n<li>runas : ユーザー</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5>scripts/install_dependencies</h5>\n<p>apacheをインストールする。</p>\n<pre><code> #!/bin/bash\nyum install -y httpd\n</code></pre>\n<h5>scripts/start_server</h5>\n<p>apacheを起動する。</p>\n<pre><code>#!/bin/bash\nservice httpd start\n</code></pre>\n<h5>scripts/stop_server</h5>\n<p>apacheを停止する。</p>\n<pre><code>#!/bin/bash\nisExistApp=`pgrep httpd`\nif [[ -n  $isExistApp ]]; then\n    service httpd stop        \nfi\n</code></pre>\n<h4>イベントフック</h4>\n<blockquote>\n<p>デプロイは<br>\n-アプリケーションの停止<br>\n-アプリケーションファイルのダウンロード<br>\n-アプリケーションファイルのインストール<br>\n-アプリケーションの起動<br>\nという順で実行され、 次のデプロイライフサイクル図において、オレンジ背景の箇所が実際にフック処理を割り込めるイベントです。</p>\n</blockquote>\n<p><dynamic-image path="blog/images/2020030/01.png" alt="イベントフック" ></dynamic-image></p>\n<blockquote>\n<p><a href="https://dev.classmethod.jp/articles/codedeploy-applicationstop-hook-not-executed-for0first-deployment/">参考:CodeDeployのApplicationStopイベントフックはどう実行される?</a></p>\n</blockquote>\n<p>※ ApplicationStopは2回目のデプロイ移行実行される</p>\n<h2>CodeDeployの設定</h2>\n<h3>アプリケーションとデプロイグループを作成</h3>\n<p>CodeDeploy &gt; アプリケーション &gt; 「アプリケーションの作成」ボタンを押す。</p>\n<p>アプリケーション名を入力して、コンピューティングプラットフォームに「EC2/オンプレミス」を選択。</p>\n<p><dynamic-image path="blog/images/2020030/02.png" alt="アプリケーションとデプロイグループを作成" ></dynamic-image></p>\n<p>デプロイグループを作成する。</p>\n<p><dynamic-image path="blog/images/2020030/03.png" alt="アプリケーションとデプロイグループを作成" ></dynamic-image>\n<dynamic-image path="blog/images/2020030/04.png" alt="アプリケーションとデプロイグループを作成" ></dynamic-image></p>\n<h3>githubを接続</h3>\n<p>CodeDeploy &gt; アプリケーション &gt; codedeploy-test &gt; codedeploy-group-test &gt; 「デプロイ作成」を押す。</p>\n<p>必要項目を入力する。</p>\n<p><dynamic-image path="blog/images/2020030/05.png" alt="githubを接続" ></dynamic-image></p>\n<p>デプロイする。</p>\n<p><dynamic-image path="blog/images/2020030/06.png" alt="githubを接続" ></dynamic-image></p>\n<h2>CodePipelineの設定</h2>\n<p>CodePipeline &gt; パイプライン &gt; 「パイプラインを作成する」ボタンを押す。</p>\n<h3>パイプラインの設定</h3>\n<p>「パイプライン名」を入力。</p>\n<h3>ソースステージを追加する</h3>\n<p>ソースプロバイダーに「Github」。\nリポジトリ、ブランチに対象のものを設定。</p>\n<h3>ビルドステージを追加する</h3>\n<p>Dockerイメージを作成する必要がある場合や、javaなどのコンパイル言語の場合に利用します。<br>\nphpやrubyのソースを配置するだけであれば、ビルドが必要ないのでスキップします、</p>\n<h3>デプロイステージを追加する</h3>\n<p>デプロイプロバイダーはCodeDeployを選択。<br>\nその他の項目もCodeDeployで作成したものを設定する。</p>\n<h3>パイプラインを作成</h3>\n<p>codepipelineが作成されて、デプロイが実行されます。</p>\n<p><dynamic-image path="blog/images/2020030/07.png" alt="パイプラインを作成" ></dynamic-image></p>\n<p>CodePipelineを利用する場合はEC2にS3にアクセスする権限を与える必要があります。<br>\n権限がない場合は以下のようなエラーが発生します。</p>\n<p><dynamic-image path="blog/images/2020030/08.png" alt="パイプラインを作成" ></dynamic-image></p>\n<p>S3への権限を追加する。</p>\n<p><dynamic-image path="blog/images/2020030/09.png" alt="パイプラインを作成" ></dynamic-image></p>\n'}},function(e,n){e.exports={attributes:{id:20210121,title:"composer require実行時にAllowed memory size of ...のエラーが発生",description:"composer require実行時にAllowed memory size of 1610612736 bytes exhausted エラーが発生したときのメモです。",createdAt:"2021-10-21T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"PHP"},html:"<p>composer require実行時に以下のエラーが発生。</p>\n<pre><code>Fatal error: Allowed memory size of 1610612736 bytes exhausted (tried to allocate 4096 bytes)\n</code></pre>\n<p>memory_limitの設定値を確認。</p>\n<pre><code> $ php -r &quot;echo ini_get('memory_limit').PHP_EOL;&quot;\n128M\n</code></pre>\n<p>php.iniの場所を確認する。</p>\n<pre><code>$ php -i | grep php.ini\nConfiguration File (php.ini) Path =&gt; /usr/local/etc/php/7.4\nLoaded Configuration File =&gt; /usr/local/etc/php/7.4/php.ini\n\n</code></pre>\n<p>php.iniを編集。</p>\n<pre><code>$ vi /usr/local/etc/php/7.4/php.ini\n; memory_limit = 128M \nmemory_limit = -1 ←こちらに変更\n\n</code></pre>\n<h2>取りあえずの対処の場合</h2>\n<p>とりあえずで良い場合の以下のコマンドできるようでした。</p>\n<pre><code>$ COMPOSER_MEMORY_LIMIT=-1 composer require xxxx/xxxx\n\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:20210111,title:"Laravel Passportをやってみるメモ",description:"Laravel Passportを利用した場合のメモ。",createdAt:"2021-10-11T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"PHP"},html:"<p>Laravel Passportを利用した場合のメモ。</p>\n<p>ライブラリインストール。</p>\n<pre><code>$ composer require laravel/passport\n</code></pre>\n<p>マイグレーションを実行。</p>\n<pre><code>$ php artisan migrate\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table (83.67ms)\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:  2014_10_12_100000_create_password_resets_table (55.75ms)\nMigrating: 2016_06_01_000001_create_oauth_auth_codes_table\nMigrated:  2016_06_01_000001_create_oauth_auth_codes_table (68.58ms)\nMigrating: 2016_06_01_000002_create_oauth_access_tokens_table\nMigrated:  2016_06_01_000002_create_oauth_access_tokens_table (103.69ms)\nMigrating: 2016_06_01_000003_create_oauth_refresh_tokens_table\nMigrated:  2016_06_01_000003_create_oauth_refresh_tokens_table (119.95ms)\nMigrating: 2016_06_01_000004_create_oauth_clients_table\nMigrated:  2016_06_01_000004_create_oauth_clients_table (73.17ms)\nMigrating: 2016_06_01_000005_create_oauth_personal_access_clients_table\nMigrated:  2016_06_01_000005_create_oauth_personal_access_clients_table (37.69ms)\nMigrating: 2019_08_19_000000_create_failed_jobs_table\nMigrated:  2019_08_19_000000_create_failed_jobs_table (58.61ms)\n</code></pre>\n<p>安全なアクセストークンを生成するのに必要な暗号キーを作成します。<br>\nさらにアクセストークンを生成するために使用する、「パーソナルアクセス」クライアントと「パスワードグラント」クライアントも作成します。</p>\n<p>Clientはユーザではなくアクセストークンを利用するアプリケーションのこと。</p>\n<p>生成された情報は<code>oauth_clients</code>テーブルに保存されます。</p>\n<pre><code>$ php artisan passport:install\nPersonal access client created successfully.\nClient ID: 1\nClient secret: Pn1hA2F8ngjZwPxcmYb3aZ9CqqRRM9zWJNwPtNqZ\nPassword grant client created successfully.\nClient ID: 2\nClient secret: hDdQbSAX484FRtCQpHafotaMEfBv0ryuWCn7kvUN\n</code></pre>\n<p><strong>Personal access client</strong>と<strong>Password grant client</strong>が作成されます。</p>\n<p>Laravel標準のusersテーブルをPassport認証に使用する。</p>\n<p>◎ app/Models/User.php</p>\n<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Passport\\HasApiTokens;　// 追加\n\nclass User extends Authenticatable\n{\n    use HasFactory;\n    use Notifiable;\n    use HasApiTokens; // 追加\n\n    ...\n}\n</code></pre>\n<p>◎ app/Providers/AppServiceProvider.php</p>\n<pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Laravel\\Passport\\Passport;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * アプリケーションのポリシーのマップ\n     *\n     * @var array\n     */\n    protected $policies = [\n        'App\\Models\\Model' =&gt; 'App\\Policies\\ModelPolicy',\n    ];\n\n    /**\n     * 全認証／認可サービスの登録\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n        Passport::routes();\n    }\n}\n</code></pre>\n<p><code>Passport::routes()</code>を追加したあと、``php artisan route:list`をするとルーティングが追加されている。\n[f:id:nogson2:20201130225222p:plain]</p>\n<h2>テストユーザーを作成</h2>\n<p>Seederを作成。</p>\n<p>◎ database/seeders/UsersTabaleSeeder.php</p>\n<pre><code>&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\n\nclass UsersTabaleSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        $param = [\n            'name' =&gt; 'taro',\n            'email' =&gt; 'taro@example.com',\n            'password' =&gt; Hash::make('test')\n        ];\n\n        DB::table('users') -&gt; insert($param);\n    }\n}\n</code></pre>\n<p><code>database/seeders/DatabaseSeeder.php</code>にも以下を追加。</p>\n<pre><code>public function run()\n{\n    $this-&gt;call(UsersTabaleSeeder::class);\n}\n</code></pre>\n<p><code>php artisan db:seed</code>を実行。</p>\n<h2>リクエストしてみる(Personal Access Token)</h2>\n<p>とりあえず、いきなりtokenが発行される<code>Personal Access Token</code>で試してみます。</p>\n<p><code>routers/api</code>に以下を追加。</p>\n<pre><code>Route::get('/test', function(){\n    $user = App\\Models\\User::find(1);\n    $token = $user-&gt;createToken('')-&gt;accessToken;\n    return response()-&gt;json(['token' =&gt; $token]);\n});\n</code></pre>\n<p><a href=\"http://localhost/api/test\">http://localhost/api/test</a>を実行。</p>\n<p>Bearer tokenが発行される。</p>\n<pre><code>{\n  &quot;token&quot;: &quot;eyJ0eXAiOiJKV1QiL...&quot;\n}\n</code></pre>\n<p>リクエストヘッダーに<code>Authorization : Bearer eyJ0eXAiOiJKV1QiL...</code>をつけて、<br>\n<a href=\"http://localhost/api/user\">http://localhost/api/user</a>を実行。</p>\n<p>user情報が返却される。</p>\n<pre><code>{\n  &quot;id&quot;: 1,\n  &quot;name&quot;: &quot;taro&quot;,\n  &quot;email&quot;: &quot;taro@example.com&quot;,\n  &quot;email_verified_at&quot;: null,\n  &quot;created_at&quot;: null,\n  &quot;updated_at&quot;: null\n}\n</code></pre>\n<h2>リクエストしてみる(Password Grant Token)</h2>\n<p>パスワードを送信してTokenが発行される、よくある認証方式です。</p>\n<p><code>php artisan passport:install</code>で作成した<code>Password grant client</code>を利用します。</p>\n<p>認可サーバ<code>http://localhot/oauth/token</code>(Laravel)に　POSTリクエストを送信します。</p>\n<p>リクエストパラメータはこちら。</p>\n<pre><code>{\n\t&quot;grant_type&quot;: &quot;password&quot;,\n\t&quot;client_id&quot;: &quot;2&quot;,\n\t&quot;client_secret&quot;: &quot;hDdQbSAX484FRtCQpHafotaMEfBv0ryuWCn7kvUN&quot;,\n\t&quot;username&quot;: &quot;taro@example.com&quot;,\n\t&quot;password&quot;: &quot;test&quot;,\n\t&quot;scope&quot;: &quot;&quot;\n}\n</code></pre>\n<p>アクセストークンが返却される。</p>\n<pre><code>{\n  &quot;token_type&quot;: &quot;Bearer&quot;,\n  &quot;expires_in&quot;: 31536000,\n  &quot;access_token&quot;: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...&quot;\n}\n</code></pre>\n<p>リクエストヘッダーに<code>Authorization : Bearer eyJ0eXAiOiJKV1QiL...</code>をつけて、<br>\n<a href=\"http://localhost/api/user\">http://localhost/api/user</a>を実行。</p>\n<p>user情報が返却される。</p>\n<pre><code>{\n  &quot;id&quot;: 1,\n  &quot;name&quot;: &quot;taro&quot;,\n  &quot;email&quot;: &quot;taro@example.com&quot;,\n  &quot;email_verified_at&quot;: null,\n  &quot;created_at&quot;: null,\n  &quot;updated_at&quot;: null\n}\n</code></pre>\n<p>続く ...</p>\n"}},function(e,n){e.exports={attributes:{id:20210118,title:"パーミッションについて",description:"ファイルのパーミッションについてのメモ。",createdAt:"2021-10-18T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Other"},html:'<h1>パーミッション</h1>\n<p>ファイルの実行権限のこと。<br>\nどの種類のオーナーが、このファイルに対して何ができるのか。</p>\n<p>以下のコマンドで確認することができる。</p>\n<pre><code>ls -la\n</code></pre>\n<p>パーミッションは以下のように9桁で表示される。</p>\n<pre><code>-rwxrwxrwx 1 root root\n</code></pre>\n<p><dynamic-image path="blog/images/20210118/01.png" alt="パーミッションについて" ></dynamic-image></p>\n<table>\n<thead>\n<tr>\n<th>権限</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>Read 読み込み権限</td>\n</tr>\n<tr>\n<td>w</td>\n<td>Write 書き込み権限</td>\n</tr>\n<tr>\n<td>x</td>\n<td>Execute 実行権限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>権限なし</td>\n</tr>\n</tbody>\n</table>\n<h2>パーミッションの変更</h2>\n<p>パーミッション変更時は、「読み込み」「書き込み」「実行可能」を3ビットの2進数で表し、8進数へ変換したものを利用します。</p>\n<table>\n<thead>\n<tr>\n<th>8進数</th>\n<th>権限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>--x</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-w-</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-wx</td>\n</tr>\n<tr>\n<td>4</td>\n<td>r--</td>\n</tr>\n<tr>\n<td>5</td>\n<td>r-x</td>\n</tr>\n<tr>\n<td>6</td>\n<td>rw-</td>\n</tr>\n<tr>\n<td>7</td>\n<td>rwx</td>\n</tr>\n</tbody>\n</table>\n<p>フル権限である<code>-rwxrwxrwx</code>にする場合は、以下を実行する。</p>\n<pre><code>chmod 777 ファイル名\n</code></pre>\n<p>所有者が読み取りのみできる<code>-r-------</code>のようにするには、以下を実行する。</p>\n<pre><code>chmod 400 ファイル名\n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20210121,title:"AWSのEC2のインスタンスメタデータについて",description:"AWSのEC2のインスタンスメタデータについてのメモです。",createdAt:"2021-10-21T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"AWS"},html:"<h1>インスタンスメタデータとは</h1>\n<blockquote>\n<p>インスタンスメタデータは、インスタンスに関するデータで、実行中のインスタンスを設定または管理するために使用します。\nhttps://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-instance-metadata.html:embed:cite</p>\n</blockquote>\n<h1>取得方法</h1>\n<h2>curlコマンドで取得</h2>\n<pre><code>\n[ec2-user@ip-XX-X-X-115 XX~]$ curl http://169.254.169.254/latest/meta-data\nami-id\nami-launch-index\nami-manifest-path\nblock-device-mapping/\nevents/\nhibernation/\nhostname\nidentity-credentials/\ninstance-action\ninstance-id\ninstance-life-cycle\ninstance-type\nlocal-hostname\nlocal-ipv4\nmac\nmetrics/\nnetwork/\nplacement/\nprofile\npublic-hostname\npublic-ipv4\npublic-keys/\nreservation-id\nsecurity-groups\n</code></pre>\n<p>ami-idを取得したい場合は、</p>\n<pre><code>[ec2-user@ip-XX-X-X-115 XX~]$ curl http://169.254.169.254/latest/meta-data/ami-id\nami-0ce107ae7af2e92b5\n</code></pre>\n<h2>ec2-metadataコマンドで取得</h2>\n<pre><code>[ec2-user@ip-XX-X-X-115 XX~]$ ec2-metadata --help\nec2-metadata v0.1.2\nUse to retrieve EC2 instance metadata from within a running EC2 instance.\ne.g. to retrieve instance id: ec2-metadata -i\n\t\t to retrieve ami id: ec2-metadata -a\n\t\t to get help: ec2-metadata --help\nFor more information on Amazon EC2 instance meta-data, refer to the documentation at\nhttp://docs.amazonwebservices.com/AWSEC2/2008-05-05/DeveloperGuide/AESDG-chapter-instancedata.html\n\nUsage: ec2-metadata &lt;option&gt;\nOptions:\n--all                     Show all metadata information for this host (also default).\n-a/--ami-id               The AMI ID used to launch this instance\n-l/--ami-launch-index     The index of this instance in the reservation (per AMI).\n-m/--ami-manifest-path    The manifest path of the AMI with which the instance was launched.\n-n/--ancestor-ami-ids     The AMI IDs of any instances that were rebundled to create this AMI.\n-b/--block-device-mapping Defines native device names to use when exposing virtual devices.\n-i/--instance-id          The ID of this instance\n-t/--instance-type        The type of instance to launch. For more information, see Instance Types.\n-h/--local-hostname       The local hostname of the instance.\n-o/--local-ipv4           Public IP address if launched with direct addressing; private IP address if launched with public addressing.\n-k/--kernel-id            The ID of the kernel launched with this instance, if applicable.\n-z/--availability-zone    The availability zone in which the instance launched. Same as placement\n-c/--product-codes        Product codes associated with this instance.\n-p/--public-hostname      The public hostname of the instance.\n-v/--public-ipv4          NATted public IP Address\n-u/--public-keys          Public keys. Only available if supplied at instance launch time\n-r/--ramdisk-id           The ID of the RAM disk launched with this instance, if applicable.\n-e/--reservation-id       ID of the reservation.\n-s/--security-groups      Names of the security groups the instance is launched in. Only available if supplied at instance launch time\n-d/--user-data            User-supplied data.Only available if supplied at instance launch time.\n</code></pre>\n<p>ami-idを取得したい場合は、</p>\n<pre><code>[ec2-user@ip-XX-X-X-115 XX~]$ ec2-metadata -a\nami-id: ami-0ce107ae7af2e92b5\n</code></pre>\n<h1>curlコマンドとec2-metadataの使い分け</h1>\n<p>curlコマンドは値だけ取得できるのでプログラムで利用するのに向いている。<br>\nec2-metadataコマンドはデータのkeyも取得されるので、プログラムで利用する場合は不便。<br>\nただ、<code>ec2-metadata --all</code>なので、値を確認するのに便利。</p>\n<p>なので、</p>\n<ul>\n<li>curlコマンド　　　　   ・・・プログラムで利用</li>\n<li>ec2-metadataコマンド・・・EC2の情報を確認するのに使用</li>\n</ul>\n"}},function(e,n){e.exports={attributes:{id:20210504,title:"ポートフォリオサイトリニューアル",description:"ポートフォリオサイトリニューアルしました。",createdAt:"2021-05-04T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Other"},html:'<p>この度ポートフォリオサイトをリニューアルしました。<br>\n特にこのサイトを利用してなにか仕事につなげたいなど強い思いはないのですが、<br>\nはてなブログに書いていたブログも合わせて管理したいなと思いリニューアルしました。</p>\n<p>ブログを作るにあたり、WordPressなどのCMSではなく静的サイトジェネレーターを使うことにしました。<br>\n理由としては、CMSはDBを利用する必要がある為面倒な為です。</p>\n<p>静的サイトジェネレーターはNuxt.jsを利用しています。<br>\nまた、ブログ部分はmarkdownを利用したかったので、<a href="https://content.nuxtjs.org/ja">nuxt/contentモジュール</a>を利用しました。</p>\n<blockquote>\n<p>Content とは</p>\n<p>nuxt/contentモジュールを使ってNuxtJSアプリケーションを強化します。content/ディレクトリに書き込むことで、MongoDBのようなAPIを使ってMarkdown、JSON、YAML、XML、CSVファイルを取得します。これはGitベースのヘッドレスCMSとして動作します。</p>\n<a href="https://content.nuxtjs.org/ja">nuxt/content</a>\n</blockquote>\n<p>まだまだ触りたてで、nuxt/contentの機能を充分に利用できていませんが、少しだけWebの知識があれば割と手軽にブログを作成することができます。<br>\n今後はこちらに、日々学んだことや思ったことを自由に書いていこうと思います。\n<br><br><br>\n<dynamic-image path="blog/images/20210504/20210504_01.gif" alt="コンテンツに応じた塗りつぶし" ></dynamic-image></p>\n<div style="font-size:10px; margin-top:-10px;margin-bottom: 24px;">こちらは以前のポートフォリオサイトです。</div>\n'}},function(e,n){e.exports={attributes:{id:20210523,title:"Photoshopのコンテンツに応じた塗りつぶし",description:"Photoshopのコンテンツに応じた塗りつぶしの使い方。",createdAt:"2021-05-23T00:00:00.000Z",thumbnail:"blog/images/photoshop_thumb.png",category:"Design"},html:'<p>Photoshopでの画像レタッチでよく使う超便利機能らしいのですが、今まで使ったことがなかった <strong>「コンテンツに応じた塗りつぶし」</strong> についてメモしておこうと思います。</p>\n<p>用途としては、例えば...</p>\n<ul>\n<li>画像から不要な物を消す</li>\n<li>背景の足りない部分をのばす</li>\n</ul>\n<br/>\n<p>などができるようです。<br>\n私はスタンプなどで時間をかけてやっていましたが、 <strong>「コンテンツに応じた塗りつぶし」</strong> を利用すれば一瞬に、しかもキレイに仕上げることができます。</p>\n<h2>使い方</h2>\n<p>使い方の説明をしていきたいと思います。<br>\n以下は背景が足りない場合の伸ばし方です。</p>\n<p>まずは写真を開きます。</p>\n<p><dynamic-image path="blog/images/20210523/20210523_01.png" alt="コンテンツに応じた塗りつぶし" ></dynamic-image></p>\n<p><strong>イメージ &gt; カンバスサイズ</strong> から必要な画像サイズにリサイズします。</p>\n<p><dynamic-image path="blog/images/20210523/20210523_02.png" alt="コンテンツに応じた塗りつぶし" ></dynamic-image></p>\n<p>次に伸ばした部分を選択の上、<strong>編集 &gt; コンテンツに応じた塗りつぶし</strong> を選択します。\n<dynamic-image path="blog/images/20210523/20210523_03.png" alt="コンテンツに応じた塗りつぶし" ></dynamic-image></p>\n<p>右側のボックスの「サンプリング領域のオプション」からカスタムを選択し、<br>\n画像の端を塗りつぶします。</p>\n<p><dynamic-image path="blog/images/20210523/20210523_04.png" alt="コンテンツに応じた塗りつぶし" ></dynamic-image></p>\n<p>すると、自動で不足分の箇所をいい感じで描画してくれます。\n仕上がりも自然です。</p>\n<p>気になるところがあれば、すこしスタンプなどを合わせて利用すればより自然に仕上がると思います。</p>\n'}},function(e,n){e.exports={attributes:{id:20210504,title:"PhpStormでリモートSSH",description:"PhpStormでリモートSSHする方法",createdAt:"2021-05-31T00:00:00.000Z",thumbnail:"blog/images/20210531/phpstorm_thumb.png",category:"PhpStorm"},html:'<p>AWSのEC2に接続する際に、VisualStudioCodeのリモートSSHプラグインが便利だったので、PhpStormでも同じような機能ないかなと思い探したら、似たのがありました。</p>\n<h2>手順</h2>\n<p><dynamic-image path="blog/images/20210531/20210531_01.png" alt="PhpStormでリモートSSHする方法" ></dynamic-image>\n<dynamic-image path="blog/images/20210531/20210531_02.png" alt="PhpStormでリモートSSHする方法" ></dynamic-image>\n<dynamic-image path="blog/images/20210531/20210531_03.png" alt="PhpStormでリモートSSHする方法" ></dynamic-image>\n<dynamic-image path="blog/images/20210531/20210531_04.png" alt="PhpStormでリモートSSHする方法" ></dynamic-image></p>\n<p>参考)\n<a href="https://qiita.com/nlog2n2/items/1d1358f6913249f3e186">Visual Studio Code で Remote SSH する。</a>\n<a href="https://qiita.com/akinko/items/d7001a8fe3ac87e1790c">【AWS】IntelliJ(Jetbrains)からAWSを操作する設定方法まとめ。AWS作業が爆速はかどります!</a></p>\n'}},function(e,n){e.exports={attributes:{id:20210923,title:"Linuxのcronについてのメモ",description:"Linuxの基礎知識としてcronを学んだ際のメモです。",createdAt:"2021-09-23T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Linux"},html:'<h2>cronとは</h2>\n<p>cronとは、Linuxでジョブを定期実行する為の機能です。Linuxの標準機能です。<br>\ncronを利用するには <strong>crond(cronデーモン)</strong> が起動している必要があります。こちらLinuxインストール時に自動で稼働します。</p>\n<h2>cronのコマンド</h2>\n<h3>起動確認</h3>\n<pre><code class="language-shell">systemctl status crond.service\n</code></pre>\n<p>以下のように<code>runnung</code>になっていれば起動中です。</p>\n<pre><code class="language-shell">[ec2-user@ip-10-0-0-84 ~]$ systemctl status crond.service\n● crond.service - Command Scheduler\n   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2021-09-23 05:14:35 UTC; 5min ago\n Main PID: 4136 (crond)\n    Tasks: 1\n   Memory: 952.0K\n   CGroup: /system.slice/crond.service\n           └─4136 /usr/sbin/crond -n\n</code></pre>\n<p>起動していなければ、以下のコマンドでcrondを起動します。</p>\n<pre><code class="language-shell">systemctl start crond.service\n</code></pre>\n<h3>登録済みのcronを確認</h3>\n<p>現在登録済みのcronのジョブを確認することができます。</p>\n<pre><code class="language-shell">crontab -l\n</code></pre>\n<h3>cronの追加(編集)</h3>\n<pre><code class="language-shell">crontab -e\n</code></pre>\n<h3>cronの削除</h3>\n<pre><code class="language-shell">crontab -r\n</code></pre>\n<h3>cronの例</h3>\n<p><dynamic-image path="blog/images/20210923/01.png" alt="cronの例" ></dynamic-image></p>\n<table>\n<thead>\n<tr>\n<th>左端から</th>\n<th>頻度</th>\n<th>指定可能数値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>分</td>\n<td>0~59</td>\n</tr>\n<tr>\n<td>2</td>\n<td>時</td>\n<td>0~23</td>\n</tr>\n<tr>\n<td>3</td>\n<td>日</td>\n<td>1~31</td>\n</tr>\n<tr>\n<td>4</td>\n<td>月</td>\n<td>1~12</td>\n</tr>\n<tr>\n<td>5</td>\n<td>曜日</td>\n<td>0~7(0と7は日曜)</td>\n</tr>\n</tbody>\n</table>\n<p>◎10分おきにdateコマンドを実行して/tmp/a.txtに保存するという例</p>\n<pre><code class="language-shell">*/10 * * * * date &gt;&gt; /tmp/a.txt\n</code></pre>\n<p><code>/tmp/a.txt</code>を確認してみる。</p>\n<pre><code class="language-shell">cat /tmp/a.txt\n</code></pre>\n<p>以下のように10分おきにコマンドが実行される。</p>\n<pre><code class="language-shell">[ec2-user@ip-10-0-0-84 ~]$ cat /tmp/a.txt\nThu Sep 23 05:10:01 UTC 2021\nThu Sep 23 05:20:01 UTC 2021\nThu Sep 23 05:30:01 UTC 2021\nThu Sep 23 05:40:01 UTC 2021\n</code></pre>\n<p>■設定ファイルを表示</p>\n<p>cronの設定を指定します。</p>\n<pre><code class="language-shell">cat /etc/crontab\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>意味</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SHELL</td>\n<td>cronで実行されるシェルを設定する</td>\n<td>/bin/bash</td>\n</tr>\n<tr>\n<td>PATH</td>\n<td>cronに教えるパスの設定</td>\n<td>/sbin:/bin:/usr/sbin:/usr/bin</td>\n</tr>\n<tr>\n<td>MAILTO</td>\n<td>cronの実行結果を送るユーザーまたはメールアドレス。<br>送信しない場合は「MAILTO=&quot;&quot;」とする</td>\n<td>root</td>\n</tr>\n<tr>\n<td>HOME</td>\n<td>cronが実行されるカレントディレクトリ</td>\n<td>/</td>\n</tr>\n</tbody>\n</table>\n'}},function(e,n){e.exports={attributes:{id:20210924,title:"Typescriptでのエラー対処法",description:"Typescriptでエラーになった場合の対処法です。自分用のメモです。",createdAt:"2021-09-24T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Typescript,Javascript"},html:"<h2>Object is possibly 'null'.</h2>\n<pre><code class=\"language-typescript\">@Component({\n  async asyncData({ $content, params }) {\n    const posts = await $content('posts/' + params.slug).fetch()\n    return { posts }\n  },\n})\nexport default class Index extends Vue {\n  head() {\n    return {\n      title: this.posts.title\n    }\n  }\n}\n\n</code></pre>\n<p><code>this.posts.title</code>がnullになる場合があるとのことで以下のエラーが発生しました。</p>\n<pre><code>Object is possibly 'null'.\n</code></pre>\n<h3>対処法1</h3>\n<p>簡単な対処法として、対象のオブジェクトに<code>!</code>の修飾子を追加します。</p>\n<pre><code class=\"language-typescript\">export default class Index extends Vue {\n  head() {\n    return {\n      title: this.posts!.title\n    }\n  }\n}\n</code></pre>\n<h3>対処法2</h3>\n<p>nullでないことを保証する。</p>\n<pre><code class=\"language-typescript\">export default class Index extends Vue {\n  head() {\n    return {\n      title: this.posts ? this.posts.title : ''\n    }\n  }\n}\n</code></pre>\n<h3>対処法3</h3>\n<p><code>tsconfig.json</code>に&quot;strictNullChecks&quot;:falseを追加する。</p>\n<pre><code>{\n  ...\n  &quot;strictNullChecks&quot;:false,\n  ...\n}\n\n</code></pre>\n<h2>TS2307: Cannot find module 'XXXXX' or its corresponding type declarations.</h2>\n<p>画像読み込み時にimportエラーが発生。\n読み込む画像に対しての型定義がないのが原因。</p>\n<pre><code>import sample from '@client/assets/img/sample.png'\n</code></pre>\n<p>対処法としては、<code>XXX.d.ts</code>ファイルを、プロジェクト配下に作成後、以下を定義する。</p>\n<pre><code>declare module '*.png'\n</code></pre>\n<h2>ESLint: Type boolean trivially inferred from a boolean literal, remove type annotation.(@typescript-eslint/no-inferrable-types)</h2>\n<p>以下のように型推論できるような変数はあえて型定義をしなくても良いらしい。</p>\n<pre><code>const a:boolean = false\n</code></pre>\n<p>こっちでOK。</p>\n<pre><code>const a = false\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:20211005,title:"PHPのUnitテストのメモ",description:"PHPのUnitの個人的なメモです。",createdAt:"2021-10-05T00:00:00.000Z",thumbnail:"blog/images/php_thumb.png",category:"PHP"},html:'<h2>テストのリストを表示</h2>\n<pre><code class="language-injectablephp">$ vendor/bin/phpunit --list-tests\n</code></pre>\n<h2>テストを実行する</h2>\n<pre><code class="language-injectablephp">$ vendor/bin/phpunit \n</code></pre>\n<h2>特定のファイルのテストを実行する</h2>\n<pre><code class="language-injectablephp">$ vendor/bin/phpunit -v tests/Feature/myTest.php\n</code></pre>\n<h2>特定のファイルの特定のテストを実行する</h2>\n<pre><code class="language-injectablephp">$ vendor/bin/phpunit -v --filter myFuncTest tests/Feature/myTest \n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20211012,title:"Vue-cliでVue3のプロジェクトを作成する",description:"Vue-cliでVue3のプロジェクトを作成する際のメモです。",createdAt:"2021-10-12T00:00:00.000Z",thumbnail:"blog/images/vue_thumb.png",category:"Javascript"},html:'<h3>Vueアプリケーションを作成する</h3>\n<pre><code class="language-shell"> $ vue create {アプリケーション名}\n</code></pre>\n<h3>presetの選択</h3>\n<p>presetの選択画面が表示されるので、Manually select features(手動設定)を選択する。</p>\n<pre><code class="language-shell">Vue CLI v4.5.13\n? Please pick a preset:\n  Default ([Vue 2] babel, eslint)\n  Default (Vue 3) ([Vue 3] babel, eslint)\n❯ Manually select features\n</code></pre>\n<h3>機能を選択</h3>\n<p>Manually select featuresを選択すると以下の画面になるので、必要な機能を選択する</p>\n<pre><code class="language-shell">? Please pick a preset: Manually select features\n? Check the features needed for your project:\n ◉ Choose Vue version\n ◉ Babel\n❯◉ TypeScript\n ◯ Progressive Web App (PWA) Support\n ◉ Router\n ◉ Vuex\n ◉ CSS Pre-processors\n ◉ Linter / Formatter\n ◯ Unit Testing\n ◯ E2E Testing\n</code></pre>\n<h3>Vueのバージョンを選択</h3>\n<p>Vueのバージョンを選択する。\n3系を利用したいので、3.x(Preview)を選択。</p>\n<pre><code class="language-shell">? Choose a version of Vue.js that you want to start the project with\n  2.x\n❯ 3.x\n</code></pre>\n<h3>クラススタイルでコンポーネントの利用</h3>\n<p>class-style component syntaxの利用の選択。</p>\n<pre><code class="language-shell">? Use class-style component syntax? (y/N)\n</code></pre>\n<p>class-style componentについては<a href="https://jp.vuejs.org/v2/guide/typescript.html#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB-Vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88">公式サイト</a>を参照。</p>\n<h3>Babel alongside TypeScriptの利用</h3>\n<p>TypeScriptをJavaScriptにトランスパイルした後、さらにそれをPolyfillで変換するかの選択。\nIEなど、モダンブラウザ以外の対応も必要な場合はYES。</p>\n<pre><code class="language-shell">? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? (Y/n)\n</code></pre>\n<h3>Vue Routerのヒストリーモードの利用</h3>\n<p>Vue Routerのヒストリーモードの利用の選択。<br>\nNoの場合はVue Routerのデフォルトのhashモード(例 : http://sample.com/#/user)。<br>\nYesの場合は、historyモード(例 : http://sample.com/user)。</p>\n<pre><code class="language-shell">? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)\n</code></pre>\n<h3>CSSプリプロセッサの選択</h3>\n<p>「Sass/SCSS」「LESS」「Stylus」の３つから選択可能。</p>\n<p>Sassを利用する場合は、dart-sassがおすすめ。</p>\n<pre><code class="language-shell">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)\n❯ Sass/SCSS (with dart-sass)\n  Sass/SCSS (with node-sass)\n  Less\n  Stylus\n</code></pre>\n<h3>Linter/Formatterの設定</h3>\n<p>「TSLint」「ESLint(4種類)」から選択可能。\nそれぞれのLinter/Formatterの説明はしませんので、Google先生に聞いてみてください。</p>\n<pre><code class="language-shell">❯ ESLint with error prevention only\n  ESLint + Airbnb config\n  ESLint + Standard config\n  ESLint + Prettier\n  TSLint (deprecated)\n</code></pre>\n<h3>追加のLint機能の選択</h3>\n<p>Lint on save・・・保存時のLint実行　　\nLint and fix on commit・・・コミット時のLint実行</p>\n<p>両方あっても良い。</p>\n<pre><code class="language-shell">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n❯◉ Lint on save\n ◉ Lint and fix on commit\n</code></pre>\n<h3>Unit Testのツール選択</h3>\n<pre><code class="language-shell">? Pick a unit testing solution:\n  Mocha + Chai\n❯ Jest\n</code></pre>\n<h3>Babel、PostCSS、ESLintの設定ファイル</h3>\n<pre><code class="language-shell">? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)\n❯ In dedicated config files\n  In package.json\n</code></pre>\n<h3>設定の保存</h3>\n<pre><code class="language-shell">? Save this as a preset for future projects? (y/N)\n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20211014,title:"Vue3 + PIXI.JSメモ",description:"初心者のVue3とPIXI.JSの導入時のメモです。",createdAt:"2021-10-14T00:00:00.000Z",thumbnail:"blog/images/vue_thumb.png",category:"Javascript"},html:"<h2>Pixiアプリケーション生成</h2>\n<p>ステージを用意する。</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;stage&quot;&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport {Options, Vue} from 'vue-class-component';\n// PixiJSを読み込み\nimport * as PIXI from 'pixi.js';\n\nexport default class MyComponent extends Vue {\n  app!: PIXI.Application\n\n  mounted() {\n    // ステージを作成\n    this.app = new PIXI.Application({\n      backgroundColor: 0xffffff,\n      antialias: true, // アンチエイリアスを有効にする\n      resolution: window.devicePixelRatio || 1, // 解像度に合わせた拡大率を指定する\n      autoDensity : true, // CSSで見た目のサイズの戻してくれる,\n      resizeTo: window // windowのリサイズに合わせてstage(canvas)をリサイズする\n    });\n    // rootのdom内(&lt;div class=&quot;stage&quot; /&gt;)にappendする\n    this.$el.appendChild(this.app.view);\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<h2>オブジェクトを配置</h2>\n<p>以下のような感じでステージに、オブジェクトを追加することができます。</p>\n<pre><code>    const obj = new PIXI.Graphics();\n    obj.beginFill(0xff0000);\n    obj.drawRect(0, 0, 200, 100);\n    this.app.stage.addChild(obj);\n</code></pre>\n<p><dynamic-image path=\"blog/images/20211014/20211014_01.png\" alt=\"ステージにオブジェクトを追加\" ></dynamic-image></p>\n<h2>グラデーションで塗る</h2>\n<p>グラデーション用のメソッドなどは無いようで、グラデーションで描画したcanvasをSpriteに入れてグラデーションを描くようです。</p>\n<pre><code>  mounted() {\n    this.app = new PIXI.Application({\n      backgroundColor: 0xffffff,\n      antialias: true,\n      resolution: window.devicePixelRatio || 1, // 解像度に合わせた拡大率を指定する\n      autoDensity: true, // CSSで見た目のサイズの戻してくれる,\n      resizeTo: window\n    });\n    \n    this.$el.appendChild(this.app.view);\n    // グラデーションを描画\n    const gradient = this.createGradient(window.innerWidth, window.innerHeight, '#acb6e5', '#86fde8');\n    this.app.stage.addChild(gradient);\n\n    this.app.renderer.resize(window.innerWidth, window.innerHeight);\n  }\n\n   // グラデーションのSpriteを生成\n   createGradient(width: number, height: number, colorFrom: string, colorTo: string): PIXI.Sprite {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    if (ctx) {\n      const gradient = ctx.createLinearGradient(0, 0, width, 0)\n\n      canvas.setAttribute('width', String(width))\n      canvas.setAttribute('height', String(height))\n\n      gradient.addColorStop(0, colorFrom)\n      gradient.addColorStop(1, colorTo)\n\n      ctx.fillStyle = gradient\n      ctx.fillRect(0, 0, width, height)\n    }\n\n    return PIXI.Sprite.from(canvas)\n  }\n</code></pre>\n<p><dynamic-image path=\"blog/images/20211014/20211014_02.png\" alt=\"グラデーションを描画\" ></dynamic-image></p>\n"}},function(e,n){e.exports={attributes:{id:20211018,title:"SEO改善メモ",description:"SEO改善の為のメモです。(作成中)",createdAt:"2021-10-18T00:00:00.000Z",thumbnail:"blog/images/note_thumb.png",category:"Other"},html:"<h2>SEO問題</h2>\n<h3>文字数が少ない</h3>\n<p>文字数が少なすぎると、Googleはコンテンツを適切に把握できません。<br>\nGoogleがページ内容を把握できない場合、狙った検索キーワードで上位表示されることはありません。<br>\n文字数を増やすことで、Googleクローラーとエンドユーザーにより詳しくページ内容を伝えられます。数百文字程度のコンテンツでは、内容が乏しいと判断され、上位表示される可能性はほとんどありません。</p>\n<h4>解決方法</h4>\n<p>内容を充実させながら文字数を増やすことで、上位表示されやすくなります。一般的に、Google検索結果の1ページ目に表示されるページの文字数は2200文字程度です。</p>\n<h3>長い読み込み時間</h3>\n<p>サイト表示時間とは、ブラウザにサイト全体、全HTMLコードが表示されるまでに要する時間です。画像、CSS、JavaなどHTMLコードで無いものは含みません。<br>\nサイト表示時間の改善は、コンテンツを上位表示させる為に重要な項目です。速ければ速いほど高く評価されます。</p>\n<h4>解決方法</h4>\n<p>サイトのHTMLコードを確認し、必要があれば整理してください。不要なプラグイン、要素、機能を削除すると表示速度が改善する可能性があります。<br>\nまた、画像を圧縮し、キャッシュを活用してください。サーバーが原因で表示速度が遅い場合は、ホスティング会社や契約プランのアップグレードを検討してください。</p>\n<h3>メタディスクリプションの重複</h3>\n<p>メタディスクリプションは、検索結果でタイトルの下に表示される短い広告文です。ページの内容を要約して伝える役割をします。ユーザーも検索エンジンクローラーも、ページ内容を把握する為に参照します。\nユーザーが求めている情報に確実にアクセスできるように、各ページに固有のメタディスクリプションを設定する必要があります。メタディスクリプションが重複していると、検索エンジンクローラーはページ間の違いや評価すべき内容を適切に把握できない為、検索順位に悪影響を及ぼします。</p>\n<h4>解決方法</h4>\n<p>全ページに、コンテンツに関連していて、かつ他のページと重複しない固有のメタディスクリプションを作成してください。</p>\n<h4>メタディスクリプションの書き方</h4>\n"}},function(e,n){e.exports={attributes:{id:20211114,title:"Firebase Storageに画像をアップロードメモ",description:"Firebase Storageに画像をアップロードするのに、少し迷うところがあったのでのメモです。",createdAt:"2021-11-14T00:00:00.000Z",thumbnail:"blog/images/firebase_thumb.png",category:"Javascript"},html:'<h2>Firebase Storageのバケットを作成する</h2>\n<p>Firebaseを表示し、サイドナビのStorageを押し、「始める」ボタンを押す。<br>\n<dynamic-image path="blog/images/20211114/20211114_01.png" alt="Firebase Storageを作成" ></dynamic-image></p>\n<p>セキュリティルールが表示される。<br>\nこちらはあとから変更は可能。\n<dynamic-image path="blog/images/20211114/20211114_02.png" alt="セキュリティルールを設定" ></dynamic-image></p>\n<p>利用するリージョンが表示される。<br>\n東京リージョンは「asia-northeast1」。<br>\nあとからの変更は不可。</p>\n<p><dynamic-image path="blog/images/20211114/20211114_03.png" alt="リージョンを選択" ></dynamic-image>\n<dynamic-image path="blog/images/20211114/20211114_04.png" alt="リージョンを選択" ></dynamic-image></p>\n<h2>Storageのセキュリティルールを変更</h2>\n<p>デフォルトのセキュリティルールは、認証済みユーザーのみ閲覧、編集可能です。\n<dynamic-image path="blog/images/20211114/20211114_05.png" alt="Storageのセキュリティルールを変更" ></dynamic-image></p>\n<p>とりあえず、以下のように変更してすべてのユーザーに閲覧、編集を可能にします。</p>\n<pre><code>rules_version = \'2\';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /{allPaths=**} {\n      allow read, write: if true;\n    }\n  }\n}\n</code></pre>\n<h2>画像をアップロード</h2>\n<p>詳しくは<a href="https://firebase.google.com/docs/storage/web/upload-files?hl=ja">公式</a>を参照。</p>\n<pre><code class="language-typescript">const upload = async (file) =&gt; {\n  // Blob または File からアップロードする\n  const storageRef = firebase.storage().ref(file.name)\n// storageにアップロード\n  const snapshot = await storageRef.put(file)\n\n// アップロードしたファイルのパスを取得\n  const path = await snapshot.getDownloadURL()\n\n// データをDB(firestore)に登録\n  const docRef = firebase.firestore().collection(\'images\')\n  await docRef.add(\n    path\n  )\n}\n</code></pre>\n<h2>CORSに対応</h2>\n<p>アップロードした画像を表示した場合CORSエラーになります。<br>\nその為、storageのCORS設定をする必要があります。</p>\n<p>CORSの設定は、<code>gsutil</code>コマンドラインツールを利用します。<br>\nダウンロードは<a href="https://cloud.google.com/storage/docs/gsutil_install?hl=ja">こちら</a>から。</p>\n<p>ダウンロードしたファイルを解凍して、解凍したファイルがあるルートディレクトリで以下のコマンドを実行します。</p>\n<pre><code class="language-shell">./google-cloud-sdk/install.sh\n</code></pre>\n<p>いくつか質問されます。</p>\n<h3>google Cloud SDKの改善に協力しますか（Y / n）？</h3>\n<pre><code class="language-shell">Do you want to help improve the Google Cloud SDK (y/N)?\n</code></pre>\n<p>どちらでもOK。</p>\n<h3>プロファイルを変更して$PATHを更新し、シェルコマンドを有効にして完了しますか？</h3>\n<pre><code class="language-shell">Modify profile to update your $PATH and enable shell command completion?\n// 続行しますか（Y / n）？\nDo you want to continue (Y/n)?\n</code></pre>\n<p>YESでOK。</p>\n<h3>更新するrcファイルへのパスを入力するか、空白のままにして使用します</h3>\n<pre><code class="language-shell">Enter a path to an rc file to update, or leave blank to use [/Users/hoge/.bash_profile]:\n</code></pre>\n<p>空白のままEnter。</p>\n<p>以下が<code>/Users/hoge/.bash_profile</code>に追加される。</p>\n<pre><code># The next line updates PATH for the Google Cloud SDK.\nif [ -f \'/Users/hoge/google-cloud-sdk/path.bash.inc\' ]; then . \'/Users/hoge/google-cloud-sdk/path.bash.inc\'; fi\n\n# The next line enables shell command completion for gcloud.\nif [ -f \'/Users/hoge/google-cloud-sdk/completion.bash.inc\' ]; then . \'/Users/hoge/google-cloud-sdk/completion.bash.inc\'; fi\n</code></pre>\n<h3>Cloud SDKは、Python 3.7と特定のモジュールが最適です</h3>\n<pre><code class="language-shell">Cloud SDK works best with Python 3.7 and certain modules.\n\nDownload and run Python 3.7 installer? (Y/n)?\n</code></pre>\n<h3>ターミナル ウィンドウを立ち上げ直す</h3>\n<p>同じターミナルウィンドウだと変更が反映されないので、新しいウィンドウか、もしくはターミナルを立ち上げ直します。</p>\n<h3>SDKを初期化</h3>\n<p>SDK を初期化します。</p>\n<pre><code class="language-shell">gcloud init \n</code></pre>\n<h3>設定ファイルをアップロード</h3>\n<p>以下の内容で、cors.jsonという名前のファイルを作成します。</p>\n<pre><code>[\n  {\n    &quot;origin&quot;: [&quot;*&quot;],\n    &quot;method&quot;: [&quot;GET&quot;],\n    &quot;maxAgeSeconds&quot;: 3600\n  }\n]\n</code></pre>\n<p>作成したファイルをデプロイします。</p>\n<pre><code class="language-shell">gsutil cors set cors.json gs://&lt;your-cloud-storage-bucket&gt;\n</code></pre>\n<p><dynamic-image path="blog/images/20211114/20211114_06.png" alt="your-cloud-storage-bucket" ></dynamic-image></p>\n<p>これでCORSエラーは回避できます。</p>\n'}},function(e,n){e.exports={attributes:{id:20211209,title:"Firebase StorageにHostingする",description:"Firebase StorageにHostingする為のメモです。",createdAt:"2021-12-09T00:00:00.000Z",thumbnail:"blog/images/firebase_thumb.png",category:"Firebase"},html:'<h1>Firebase CLI をインストール</h1>\n<p>Firebase CLI をインストールする。</p>\n<pre><code>$ npm install -g firebase-tools\n</code></pre>\n<p>Firebase CLI にログインしてテストする。</p>\n<pre><code>$ firebase login\n\ni  Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google\'s privacy policy (https://policies.google.com/privacy) and is not used to identify you.\n\n? Allow Firebase to collect CLI usage and error reporting information? (Y/n) Yes\n\n</code></pre>\n<p>ログインを実行すると、ブラウザでログインを求められるのでログインする。</p>\n<p><dynamic-image path="blog/images/20211209/20211209_01.png" alt="ログイン" ></dynamic-image></p>\n<p>その後操作を付けるとログイン成功画面が表示される。</p>\n<p><dynamic-image path="blog/images/20211209/20211209_02.png" alt="ログイン" ></dynamic-image></p>\n<p>コンソールにもメッセージが表示される。</p>\n<pre><code>✔  Success! Logged in as XXXXXXXX@gmail.com\n</code></pre>\n<h1>プロジェクトディレクトリを設定する</h1>\n<p>静的サイトのローカルディレクトリをFirebaseのプロジェクトに接続します。</p>\n<p>どの機能を利用するか聞かれるので、Hostingを選択する。</p>\n<pre><code>$ firebase init \n     ######## #### ########  ######## ########     ###     ######  ########\n     ##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##\n     ######    ##  ########  ######   ########  #########  ######  ######\n     ##        ##  ##    ##  ##       ##     ## ##     ##       ## ##\n     ##       #### ##     ## ######## ########  ##     ##  ######  ########\n\nYou\'re about to initialize a Firebase project in this directory:\n\n  /Users/username/project\n\n? Which Firebase features do you want to set up for this directory? Press Space to select features, then Enter to confirm your choices. (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n ◯ Realtime Database: Configure a security rules file for Realtime Database and (optionally) provision default instance\n ◯ Firestore: Configure security rules and indexes files for Firestore\n ◯ Functions: Configure a Cloud Functions directory and its files\n❯◉ Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys\n ◯ Hosting: Set up GitHub Action deploys\n ◯ Storage: Configure a security rules file for Cloud Storage\n ◯ Emulators: Set up local emulators for Firebase products\n(Move up and down to reveal more choices)\n\n</code></pre>\n<p>既存のプロジェクトを利用するので<code>Use an existing project </code>を選択。</p>\n<pre><code>? Please select an option: (Use arrow keys)\n❯ Use an existing project \n  Create a new project \n  Add Firebase to an existing Google Cloud Platform project \n  Don\'t set up a default project \n</code></pre>\n<p>対象のプロジェクトを選択する。</p>\n<pre><code>? Please select an option: Use an existing project\n? Select a default Firebase project for this directory: (Use arrow keys)\n❯ my-project977b8 (my-project) \n  test-b388a (test) \n</code></pre>\n<p>index.htmlファイルが存在する公開するディレクトリを指定する。<br>\n今回はVue CLIで作成したプロジェクトだったので、publicではなく、build後に作成されるdistフォルダを指定する。</p>\n<pre><code>Your public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to be uploaded with firebase deploy. If you\nhave a build process for your assets, use your build\'s output directory.\n\n? What do you want to use as your public directory? dist\n</code></pre>\n<p>シングルページの場合はyを。</p>\n<pre><code>? Configure as a single-page app (rewrite all urls to /index.html)? (y/N) \n</code></pre>\n<p>GitHubのコードと自動同期してくれる設定。</p>\n<pre><code>Set up automatic builds and deploys with GitHub? (y/N) \n</code></pre>\n<p>index.htmlファイルは上書きしないのでNo。</p>\n<pre><code>? File dist/index.html already exists. Overwrite? (y/N) \n</code></pre>\n<p>その後、firebase.jsonと.firebasercファイルが作成されディレクトリ設定は完了。</p>\n<pre><code>i  Skipping write of dist/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n</code></pre>\n<p>#デプロイする</p>\n<p>以下コマンドでデプロイすると、ホスティングされる。</p>\n<pre><code>$ firebase deploy\n\n...\n\n✔  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/my-project-977b8/overview\nHosting URL: https://my-project.web.app\n\n</code></pre>\n'}},function(e,n){e.exports={attributes:{id:20211218,title:"Blenderでよく忘れてしまう設定とショートカットメモ",description:"Blenderでよく忘れてしまう設定とショートカットを自分用にメモしています。",createdAt:"2021-12-18T00:00:00.000Z",thumbnail:"blog/images/blender_thumb.png",category:"Blender"},html:'<h1>Blenderで表示単位を変更する</h1>\n<p>初期設定の単位はメートル法になっています。<br>\nもう少し小さい単位で作業したい場合に、表示の単位を変更する方法です。</p>\n<h2>単位をセンチメートルにする</h2>\n<ol>\n<li>「シーン &gt; 単位 &gt; 長さ &gt; centimeters」に変更</li>\n<li>ガイドがメートル単位になっているので、「拡大縮小」を0.01に変更\n<dynamic-image path="blog/images/20211218/01.png" alt="単位変更" ></dynamic-image></li>\n</ol>\n<p>画面の表示はこんな感じ。<br>\n<dynamic-image path="blog/images/20211218/02.png" alt="単位変更" ></dynamic-image></p>\n<h1>よく忘れるショートカット</h1>\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>キー</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>範囲指定して拡大表示</td>\n<td>Shift + B</td>\n</tr>\n<tr>\n<td>ビューに収まるように視点を移動</td>\n<td>Shift + C</td>\n</tr>\n</tbody>\n</table>\n'}},function(e,n){e.exports={attributes:{id:202112,title:"XXXXXX",description:"npm_moudulesの脆弱性エラーの解消",thumbnail:"blog/images/note_thumb.png",createdAt:"2021-11-12T00:00:00.000Z",category:"Javascript"},html:"<p>シェイプキーを利用すると、オブジェクト単体で</p>\n<pre><code>$ npm install -g npm-check-updates\n</code></pre>\n<pre><code>$ ncu\n</code></pre>\n<pre><code>$ ncu -u\n</code></pre>\n<pre><code># upgrade only mocha\n$ ncu mocha\n$ ncu -f mocha\n$ ncu --filter mocha\n</code></pre>\n<p>Don't use ESLint 7 with Vue CLI 4.</p>\n<p>You can use ESLint 7 with Vue CLI 5, or ESLint 6 with Vue CLI 4.</p>\n<h2>パッケージの依存関係を確認する</h2>\n<pre><code>npm ls パッケージ名\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:20211222,title:"Jestであれこれmockを作成する方法",description:"VueでJestを利用した際に、テストしやすいように関数や、グローバルオブジェクトなどmock化する為のメモです。",createdAt:"2021-12-22T00:00:00.000Z",thumbnail:"blog/images/jest_thumb.png",category:"Vue"},html:"<h1>windowオブジェクトをmock化する</h1>\n<p>windowサイズを使っている関数などをテストする為に、windowオブジェクトをモック化する。</p>\n<pre><code>const originalWindow = { ...window }\nconst windowSpy = jest.spyOn(global, 'window', 'get')\nwindowSpy.mockImplementation(() =&gt; ({\n  ...originalWindow,\n  innerWidth: 1920,\n innerHeight: 1200\n}))\n\n... テストを書く\n\nwindowSpy.mockRestore()\n</code></pre>\n"}},function(e,n){e.exports={attributes:{id:20211228,title:"Blenderでシェイプキーを使ったアニメーション",description:"Blenderでメッシュの頂点の位置を変化させてアニメーションするやり方です。",createdAt:"2021-12-28T00:00:00.000Z",thumbnail:"blog/images/blender_thumb.png",category:"Blender"},html:'<p>シェイプキーは、「メッシュオブジェクトの頂点・辺・面などの情報を記憶させておける機能」のことのようです。<br>\nモーフィングアニメーションできないかな〜と思い調べていたら出てきました。</p>\n<h1>オブジェクトにシェイプキーを追加する</h1>\n<p>まず、基本となるシェイプキーを追加します。</p>\n<p>オブジェクトを選択して、「オブジェクトプロパティ &gt; シェイプキー」の「+」ボタンを押します。<br>\n<dynamic-image path="blog/images/20211228/01.png" alt="シェイプキーを追加" ></dynamic-image></p>\n<p>次に「+」ボタンを押して、形状変更用のシェイプキーを作成します。<br>\n<dynamic-image path="blog/images/20211228/02.png" alt="シェイプキーを追加" ></dynamic-image></p>\n<h1>アニメーションさせる</h1>\n<p>形状変更用に追加した、「キー1」のシェイプキーを選択した状態で、オブジェクトを編集して形状を変更してみます。<br>\n<dynamic-image path="blog/images/20211228/03.png" alt="アニメーションさせる" ></dynamic-image></p>\n<p>タイムラインで1フレーム目を選択します。<br>\n対象のオブジェクト、「キー1」のシェイプキーを選択した状態で「値」のフィールドで右クリックします。\n<dynamic-image path="blog/images/20211228/04.png" alt="アニメーションさせる" ></dynamic-image></p>\n<p>表示されたコンテキストボックスの中から「キーフレームを挿入」を選択する。<br>\n<dynamic-image path="blog/images/20211228/05.png" alt="アニメーションさせる" ></dynamic-image></p>\n<p>タイムラインで50フレーム目を選択します。<br>\n対象のオブジェクト、「キー1」のシェイプキーを選択した状態で「値」のフィールドで右クリックし、キーフレームを挿入します。\n<dynamic-image path="blog/images/20211228/06.png" alt="アニメーションさせる" ></dynamic-image></p>\n<p>最終的にはこんな感じのタイムラインになる。</p>\n<ul>\n<li>0フレーム ・・・値:0</li>\n<li>50フレーム ・・・値:1</li>\n<li>100フレーム ・・・値:0\n<dynamic-image path="blog/images/20211228/07.png" alt="アニメーションさせる" ></dynamic-image></li>\n</ul>\n<p>こんな感じでアニメーションさせることができる。\n<dynamic-image path="blog/images/20211228/08.gif" alt="アニメーションさせる" ></dynamic-image></p>\n'}},function(e,n,t){e.exports=t.p+"img/01.06b4ead.png"},function(e,n,t){e.exports=t.p+"img/02.10c2436.png"},function(e,n,t){e.exports=t.p+"img/03.fbf11fa.png"},function(e,n,t){e.exports=t.p+"img/04.7d2f67d.png"},function(e,n,t){e.exports=t.p+"img/01.848cbe4.png"},function(e,n,t){e.exports=t.p+"img/02.d47cf74.png"},function(e,n,t){e.exports=t.p+"img/03.601c551.png"},function(e,n,t){e.exports=t.p+"img/04.00893dd.png"},function(e,n,t){e.exports=t.p+"img/05.6907dda.png"},function(e,n,t){e.exports=t.p+"img/06.5c5938b.png"},function(e,n,t){e.exports=t.p+"img/07.2a0321c.png"},function(e,n,t){e.exports=t.p+"img/08.1fc6289.png"},function(e,n,t){e.exports=t.p+"img/09.d39744d.png"},function(e,n,t){e.exports=t.p+"img/10.868d3cc.png"},function(e,n,t){e.exports=t.p+"img/11.12871f6.png"},function(e,n,t){e.exports=t.p+"img/12.1d1ca26.png"},function(e,n,t){e.exports=t.p+"img/01.461654f.png"},function(e,n,t){e.exports=t.p+"img/01.08826b0.png"},function(e,n,t){e.exports=t.p+"img/02.ed12a54.png"},function(e,n,t){e.exports=t.p+"img/03.46c764f.png"},function(e,n,t){e.exports=t.p+"img/04.24af182.png"},function(e,n,t){e.exports=t.p+"img/05.95ebf2e.png"},function(e,n,t){e.exports=t.p+"img/06.2524cbc.png"},function(e,n,t){e.exports=t.p+"img/07.6cefdcb.png"},function(e,n,t){e.exports=t.p+"img/08.d36045f.png"},function(e,n,t){e.exports=t.p+"img/09.39edb2c.png"},function(e,n,t){e.exports=t.p+"img/01.6e1a34d.png"},function(e,n,t){e.exports=t.p+"img/20210504_01.0e8b9ab.gif"},function(e,n,t){e.exports=t.p+"img/20210523_01.4d24bfd.png"},function(e,n,t){e.exports=t.p+"img/20210523_02.add1321.png"},function(e,n,t){e.exports=t.p+"img/20210523_03.8110e8d.png"},function(e,n,t){e.exports=t.p+"img/20210523_04.a9e65bc.png"},function(e,n,t){e.exports=t.p+"img/20210531_01.523cc97.png"},function(e,n,t){e.exports=t.p+"img/20210531_02.3e519a0.png"},function(e,n,t){e.exports=t.p+"img/20210531_03.4dccbf0.png"},function(e,n,t){e.exports=t.p+"img/20210531_04.5ec83ed.png"},function(e,n,t){e.exports=t.p+"img/phpstorm_thumb.66d94b5.png"},function(e,n,t){e.exports=t.p+"img/01.04652d1.png"},function(e,n,t){e.exports=t.p+"img/20211014_01.5885cb8.png"},function(e,n,t){e.exports=t.p+"img/20211014_02.c199b21.png"},function(e,n,t){e.exports=t.p+"img/20211114_01.631b7b8.png"},function(e,n,t){e.exports=t.p+"img/20211114_02.d9a3edf.png"},function(e,n,t){e.exports=t.p+"img/20211114_03.479f516.png"},function(e,n,t){e.exports=t.p+"img/20211114_04.f8a0342.png"},function(e,n,t){e.exports=t.p+"img/20211114_05.140c612.png"},function(e,n,t){e.exports=t.p+"img/20211114_06.96e3cfa.png"},function(e,n,t){e.exports=t.p+"img/20211209_01.ac891da.png"},function(e,n,t){e.exports=t.p+"img/20211209_02.9547831.png"},function(e,n,t){e.exports=t.p+"img/01.a52616e.png"},function(e,n,t){e.exports=t.p+"img/02.4839cfa.png"},function(e,n,t){e.exports=t.p+"img/01.657e079.png"},function(e,n,t){e.exports=t.p+"img/02.1b3bd93.png"},function(e,n,t){e.exports=t.p+"img/03.500cc9d.png"},function(e,n,t){e.exports=t.p+"img/04.5d8a4b1.png"},function(e,n,t){e.exports=t.p+"img/05.7a7c8d6.png"},function(e,n,t){e.exports=t.p+"img/06.a9b4a32.png"},function(e,n,t){e.exports=t.p+"img/07.51666f8.png"},function(e,n,t){e.exports=t.p+"img/08.935ac73.gif"},function(e,n,t){e.exports=t.p+"img/aws_code_deploy_thumb.92b2c8a.png"},function(e,n,t){e.exports=t.p+"img/aws_fargate_thumb.524e0ea.png"},function(e,n,t){e.exports=t.p+"img/aws_thumb.112fe12.png"},function(e,n,t){e.exports=t.p+"img/blender_thumb.4bbbc78.png"},function(e,n,t){e.exports=t.p+"img/firebase_thumb.ccf2914.png"},function(e,n,t){e.exports=t.p+"img/heroku_thumb.8f2e2b5.png"},function(e,n,t){e.exports=t.p+"img/jest_thumb.5c32394.png"},function(e,n,t){e.exports=t.p+"img/note_thumb.5b0bd77.png"},function(e,n,t){e.exports=t.p+"img/photoshop_thumb.e80b39f.png"},function(e,n,t){e.exports=t.p+"img/php_thumb.bf5ced1.png"},function(e,n,t){e.exports=t.p+"img/undefined_thumb.9b26ec5.png"},function(e,n,t){e.exports=t.p+"img/vessel_thumb.275cc8c.png"},function(e,n,t){e.exports=t.p+"img/vue_thumb.3cd36ad.png"},function(e,n){e.exports={attributes:{id:"3d01",title:"3D",description:"3Dの習作です。基本的にはYoutubeの初心者向けチュートリアルをみながら作っています。",thumbnail:"portfolio/images/3d/3d_14.png",createdAt:"2021-09-16T00:00:00.000Z",order:2},html:'<p>大したものでは無いですが、3Dの習作です。<br>\nBlenderを利用しています。</p>\n<h2>01</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_14.png" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>02</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_01.png" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>03</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_02.jpg" alt="3Dイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/3d/3d_03.jpg" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>04</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_05.png" alt="3Dイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/3d/3d_06.png" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>05</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_13.jpg" alt="3Dイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/3d/3d_07.jpg" alt="3Dイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/3d/3d_08.jpg" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>06</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_10.jpg" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>07</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_11.jpg" alt="3Dイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/3d/3d_12.jpg" alt="3Dイメージ" ></dynamic-image></p>\n<h2>08</h2>\n<p><dynamic-image path="portfolio/images/3d/3d_15.png" alt="3Dイメージ" ></dynamic-image>\n<br>\n<br></p>\n'}},function(e,n){e.exports={attributes:{id:"adobe-max-challenge",title:"AdobeMaxChallenge",description:"AdobeMaxChallengeに応募した作品です。あえなく落選。",thumbnail:"portfolio/images/adobe-max-challenge/adobe-max-challenge_thumb.png",createdAt:"2019-10-01T00:00:00.000Z",order:3},html:'<p>AdobeMaxChallengeに応募した作品です。<br>\nあえなく落選でした。<br>\nツールはTouchDesigner、Principleを利用しています。</p>\n<h2>01</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_01.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>02</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_02.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>03</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_03.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>04</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_04.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>05</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_05.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n<h2>05</h2>\n<p><dynamic-image path="portfolio/images/adobe-max-challenge/adobe-max-challenge_06.gif" alt="AdobeMaxChallengeイメージ" ></dynamic-image>\n<br>\n<br></p>\n'}},function(e,n){e.exports={attributes:{id:"DailyUI01",title:"Daily UI",description:"まだ道半ばですが、DailyUIの成果です。",thumbnail:"portfolio/images/dailyui/dailyui_thumb.png",createdAt:"2019-12-01T00:00:00.000Z",order:4},html:'<p>Daily UIをご存知でしょうか。<br>\nDaily UIとは、週末を除く100日間の間メールでデザインのお題を送ってくれるというサービスです。</p>\n<p>人によるとは思うのですが、あまり時間をかけず数をこなしていく感じです。<br>\nインプットとアウトプットを繰り返し行うことで、UI作成の力をつけていきます。</p>\n<p>Daily UIに取り組む上で、以下のことを意識してやりました。</p>\n<ul>\n<li>モーションのスキルも上げる為なるべくアニメーションをつける</li>\n<li>仕事じゃないので、あまり操作性を気にしないで自由に作る</li>\n<li>普段使わないような色を使う</li>\n<li>なるべく1~2時間以内で作る</li>\n</ul>\n<br />\n<br />\n<h2>01 Sign Up</h2>\n<p><dynamic-image path="portfolio/images/dailyui/001.png" alt="Sign Up" ></dynamic-image>\n<br />\n<br /></p>\n<h2>02 Credit Card Checkout</h2>\n<p><dynamic-image path="portfolio/images/dailyui/002.gif" alt="Credit Card Checkout"></dynamic-image>\n<br />\n<br /></p>\n<h2>03 Landing Page</h2>\n<p><dynamic-image path="portfolio/images/dailyui/003.png" alt="Landing Page"></dynamic-image>\n<br />\n<br /></p>\n<h2>04 Calculator</h2>\n<p><dynamic-image path="portfolio/images/dailyui/004.gif" alt="Calculator"></dynamic-image>\n<br />\n<br /></p>\n<h2>05 App Icon</h2>\n<p><dynamic-image path="portfolio/images/dailyui/005.gif" alt="App Icon"></dynamic-image>\n<br />\n<br /></p>\n<h2>06 User Profile</h2>\n<p><dynamic-image path="portfolio/images/dailyui/006.gif" alt="User Profile"></dynamic-image>\n<br />\n<br /></p>\n<h2>07 Settings</h2>\n<p><dynamic-image path="portfolio/images/dailyui/007.gif" alt="Settings"></dynamic-image>\n<br />\n<br /></p>\n<h2>08 404 Page</h2>\n<p><dynamic-image path="portfolio/images/dailyui/008.gif" alt="404 Page"></dynamic-image>\n<br />\n<br /></p>\n<h2>09 Music Player</h2>\n<p><dynamic-image path="portfolio/images/dailyui/009.gif" alt="Music Player"></dynamic-image>\n<br />\n<br /></p>\n<h2>10 Social Share</h2>\n<p><dynamic-image path="portfolio/images/dailyui/010.gif" alt="Social Share"></dynamic-image>\n<br />\n<br /></p>\n<h2>11 Sign Up</h2>\n<p><dynamic-image path="portfolio/images/dailyui/011.gif" alt="Sign Up"></dynamic-image>\n<br />\n<br /></p>\n<h2>12 E-Commerce Shop (Single Item)</h2>\n<p><dynamic-image path="portfolio/images/dailyui/012.png" alt=" E-Commerce Shop"></dynamic-image>\n<br />\n<br /></p>\n<h2>13 Direct Messaging</h2>\n<p><dynamic-image path="portfolio/images/dailyui/013.png" alt="Direct Messaging"></dynamic-image>\n<br />\n<br /></p>\n<h2>14 Countdown Timer</h2>\n<p><dynamic-image path="portfolio/images/dailyui/014.gif" alt="Countdown Timer"></dynamic-image>\n<br />\n<br /></p>\n<h2>15 On/Off Switch</h2>\n<p><dynamic-image path="portfolio/images/dailyui/015.gif" alt="On/Off Switch"></dynamic-image>\n<br />\n<br /></p>\n<h2>16 Pop-Up / Overlay</h2>\n<p><dynamic-image path="portfolio/images/dailyui/016.gif" alt="Pop-Up / Overlay"></dynamic-image>\n<br />\n<br /></p>\n<h2>17 Pop-Up / Overlay</h2>\n<p><dynamic-image path="portfolio/images/dailyui/017.gif" alt="Email Receipt"></dynamic-image>\n<br />\n<br /></p>\n<h2>18 Analytics Chart</h2>\n<p><dynamic-image path="portfolio/images/dailyui/018.gif" alt="Analytics Chart"></dynamic-image>\n<br />\n<br /></p>\n<h2>19 Leaderboard</h2>\n<p><dynamic-image path="portfolio/images/dailyui/019.png" alt="Leaderboard"></dynamic-image>\n<br />\n<br /></p>\n<h2>20 Location Tracker</h2>\n<p><dynamic-image path="portfolio/images/dailyui/020.gif" alt="Location Tracker"></dynamic-image>\n<br />\n<br /></p>\n<h2>21 Home Monitoring Dashboard</h2>\n<p><dynamic-image path="portfolio/images/dailyui/021.gif" alt="Home Monitoring Dashboard"></dynamic-image>\n<br />\n<br /></p>\n<h2>22 Search</h2>\n<p><dynamic-image path="portfolio/images/dailyui/022.gif" alt="Search"></dynamic-image>\n<br />\n<br /></p>\n<h2>23 Onboarding</h2>\n<p><dynamic-image path="portfolio/images/dailyui/023.gif" alt="Onboarding"></dynamic-image>\n<br />\n<br /></p>\n<h2>24 Boarding Pass</h2>\n<p><dynamic-image path="portfolio/images/dailyui/024.png" alt="Boarding Pass"></dynamic-image>\n<br />\n<br /></p>\n<h2>25 TV App</h2>\n<p><dynamic-image path="portfolio/images/dailyui/025.gif" alt="TV App"></dynamic-image>\n<br />\n<br /></p>\n<h2>26 Subscribe</h2>\n<p><dynamic-image path="portfolio/images/dailyui/026.gif" alt="Subscribe"></dynamic-image>\n<br />\n<br /></p>\n<h2>27 Dropdown</h2>\n<p><dynamic-image path="portfolio/images/dailyui/027.gif" alt="Dropdown"></dynamic-image>\n<br />\n<br /></p>\n<h2>28 Contact Us</h2>\n<p><dynamic-image path="portfolio/images/dailyui/028.gif" alt="Contact Us"></dynamic-image>\n<br />\n<br /></p>\n<h2>29 Map</h2>\n<p><dynamic-image path="portfolio/images/dailyui/029.png" alt="Map"></dynamic-image>\n<br />\n<br /></p>\n<h2>30 Pricing</h2>\n<p><dynamic-image path="portfolio/images/dailyui/030.gif" alt="Pricing"></dynamic-image>\n<br />\n<br /></p>\n<h2>31 File Upload</h2>\n<p><dynamic-image path="portfolio/images/dailyui/031.gif" alt="File Upload"></dynamic-image>\n<br />\n<br /></p>\n<h2>32 Crowdfunding Campaign</h2>\n<p><dynamic-image path="portfolio/images/dailyui/032.png" alt="Crowdfunding Campaign"></dynamic-image>\n<br />\n<br /></p>\n<h2>33 Customize Product</h2>\n<p><dynamic-image path="portfolio/images/dailyui/033.gif" alt="Customize Product"></dynamic-image>\n<br />\n<br /></p>\n<h2>34 Car Interface</h2>\n<p><dynamic-image path="portfolio/images/dailyui/034.png" alt="Car Interface"></dynamic-image>\n<br />\n<br /></p>\n<h2>35 Blog Post</h2>\n<p><dynamic-image path="portfolio/images/dailyui/035.png" alt="Blog Post"></dynamic-image>\n<br />\n<br /></p>\n'}},function(e,n){e.exports={attributes:{id:"lp-01",title:"監視カメラサービスLP",description:"監視カメラサービスのLPです。デザイン、実装、ホスティングまで担当。",thumbnail:"portfolio/images/lp/lp_01_thumb.png",createdAt:"2020-10-04T00:00:00.000Z",order:10},html:"<h2>概要</h2>\n<p>クラウド型の監視・防犯カメラサービスです。<br>\nデザイン、実装、ホスティング、ライティングを担当しました。</p>\n<p>デザインするにあたっては、監視・防犯カメラの少しネガティブな印象をより明るくポジティブな印象に変えるように意識しました。<br>\nまたBlenderを利用してイラストを作成することで、パーツの使いまわしが簡単になり工数を圧縮することができました。</p>\n<p><dynamic-image path=\"portfolio/images/lp/lp_01.png\" alt=\"LP画面イメージ\" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items=\"['NuxtJS','AWS S3','AWS CloudFront','Figma','illustrator','Blender']\"></skill></p>\n"}},function(e,n){e.exports={attributes:{id:"lp-02",title:"動画マーケティングツールLP",description:"動画マーケティングの支援ツールのLPです。デザイン、実装を担当しました。",thumbnail:"portfolio/images/lp/lp_02_thumb.png",createdAt:"2018-02-01T00:00:00.000Z",order:9},html:"<h2>概要</h2>\n<p>動画マーケティングの支援ツールです。<br>\nデザイン、実装を担当しました。</p>\n<p>デザインするにあたっては、「動画マーケティングツール」とは何ができるのかをわかりやすく伝える為に、<br>\n機能の紹介と、実際の画面イメージをあわせて紹介しています。</p>\n<p><dynamic-image path=\"portfolio/images/lp/lp_02.jpg\" alt=\"LPO画面イメージ\" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items=\"['NuxtJS','AWS S3','AWS CloudFront','Sketch','illustrator']\"></skill></p>\n"}},function(e,n){e.exports={attributes:{id:"lp-03",title:"動画配信プラットフォームLP",description:"クローズドな動画配信プラットフォームのLPです。デザイン、実装を担当しました。",thumbnail:"portfolio/images/lp/lp_03_thumb.png",createdAt:"2017-07-01T00:00:00.000Z",order:8},html:'<h2>概要</h2>\n<p>クローズドな動画配信プラットフォームのLPです。<br>\nデザイン、実装を担当しました。</p>\n<p>デザインするにあたっては、動画配信経験が浅いユーザーに導入してもらえるように、イラストを沢山使いサービスのイメージがしやすようにしました。</p>\n<p><dynamic-image path="portfolio/images/lp/lp_03.jpg" alt="LPO画面イメージ" ></dynamic-image></p>\n<h3>イラスト</h3>\n<p><dynamic-image path="portfolio/images/lp/lp_03_1.png" alt="LPO画面イメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/lp/lp_03_2.png" alt="LPO画面イメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/lp/lp_03_3.png" alt="LPO画面イメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/lp/lp_03_4.png" alt="LPO画面イメージ" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items="[\'NuxtJS\',\'AWS S3\',\'AWS CloudFront\',\'illustrator\',\'Photoshop\']"></skill></p>\n'}},function(e,n){e.exports={attributes:{id:"phpcon2021",title:"PHPカンファレンス2021 ロゴの提案",description:"PHPカンファレンス2021のロゴの提案です。残念ながら不採用でした。",thumbnail:"portfolio/images/phpcon2021/phpcon2021_thumb.png",createdAt:"2021-05-04T00:00:00.000Z",order:12},html:'<p>2019年頃からPHPの勉強の為参加している、PHPカンファレンスのロゴコンペの応募案です。\n残念ながら不採用となりました。</p>\n<p>あまりロゴぽくせず、Tシャツや、配布物など横展開時に利用しやすいデザインにしました。</p>\n<p><dynamic-image path="portfolio/images/phpcon2021/phpcon2021_01.jpg" alt="PHPカンファレンス2021 ロゴの提案イメージ"></dynamic-image></p>\n<p><dynamic-image path="portfolio/images/phpcon2021/phpcon2021_02.jpg" alt="PHPカンファレンス2021 ロゴの提案イメージ"></dynamic-image></p>\n<p><dynamic-image path="portfolio/images/phpcon2021/phpcon2021_03.png" alt="PHPカンファレンス2021 ロゴの提案イメージ"></dynamic-image></p>\n<p><dynamic-image path="portfolio/images/phpcon2021/phpcon2021_04.png" alt="PHPカンファレンス2021 ロゴの提案イメージ"></dynamic-image></p>\n'}},function(e,n){e.exports={attributes:{id:"processing",title:"Processing",description:"Processingの習作です。",thumbnail:"portfolio/images/processing/processing_01_thumb.png",createdAt:"2017-01-10T00:00:00.000Z",order:1},html:'<p>大したものでは無いですが、Processingの習作です。<br>\np5.jsを利用しています。</p>\n<h2>01</h2>\n<p><dynamic-image path="portfolio/images/processing/processing_01.gif" alt="processingイメージ" ></dynamic-image>\n<a href="https://nogson.github.io/p5js_sample/" class="link-text-right">view</a></p>\n<h2>02</h2>\n<p><dynamic-image path="portfolio/images/processing/processing_02.gif" alt="processingイメージ" ></dynamic-image>\n<a href="https://nogson.github.io/p5js_sample2/" class="link-text-right">view</a></p>\n'}},function(e,n){e.exports={attributes:{id:"touchdesigner",title:"TouchDesigner",description:"TouchDesignerの習作です。",thumbnail:"portfolio/images/touchdesigner/td_thumb.png",createdAt:"2021-05-04T00:00:00.000Z",order:0},html:'<p>大したものでは無いですが、TouchDesignerの習作です。</p>\n<h2>01</h2>\n<p><dynamic-image path="portfolio/images/touchdesigner/td_01.png" alt="touchdesignerイメージ" ></dynamic-image>\n<dynamic-image path="portfolio/images/touchdesigner/td_02.png" alt="touchdesignerイメージ" ></dynamic-image>\n<br>\n<br></p>\n'}},function(e,n){e.exports={attributes:{id:"web-service-01",title:"スキル交換サービス KOOKAN-KO",description:"得意なことを教え合い、スキルアップを目指すマッチングサービスです。",thumbnail:"portfolio/images/web_service/kookan_ko_thumb.png",createdAt:"2020-11-01T00:00:00.000Z",order:6},html:"<p>個人で開発しているサービスです。</p>\n<h2>サービス概要</h2>\n<p>KOOKAN-KO(コーカンコ)は、新しいスキルを学びたい人達をマッチングするサービスです。</p>\n<p>自分の得意なスキルを学びたいと思っている人が、自分に無いスキルを持っていることはよくあることです。\nお互い得意分野を教え合い、さらなるスキルアップを後押しするサービスです。</p>\n<p><dynamic-image path=\"portfolio/images/web_service/web01_01.png\" alt=\"KOOKAN-KO画面イメージ\" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items=\"['NuxtJS','Typescript','Laravel','MySQL','AWS S3','Docker','Heroku','Figma','illustrator']\"></skill></p>\n"}},function(e,n){e.exports={attributes:{id:"web-service-02",title:"簡単自動おしゃべりサービス Oシャベリ",description:"入力した文字をおしゃべりしてくれるサービス。",thumbnail:"portfolio/images/web_service/oshavery_thumb.png",createdAt:"2020-08-01T00:00:00.000Z",order:7},html:"<p>個人で開発しているサービスです。</p>\n<h2>サービス概要</h2>\n<p>Web Speech APIがつかってみたいという思いから作り出しました。<br>\n入力した文字をだた読み上げるだけのサービスです。\nOGP画像を自動で生成するようにしているので、SNSを利用して拡散できなかなと共有ボタンを配置してみたりもしました。</p>\n<h4>投稿一覧ページ</h4>\n<p>設定したタグでの絞り込みや、メッセージの再生ができる。</p>\n<p><dynamic-image path=\"portfolio/images/web_service/web02_01.gif\" alt=\"Oシャベリ画面イメージ\" ></dynamic-image></p>\n<h4>投稿画面と詳細ページ</h4>\n<p><dynamic-image path=\"portfolio/images/web_service/web02_02.png\" alt=\"Oシャベリ画面イメージ\" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items=\"['NuxtJS','Typescript','Laravel','MySQL','AWS S3','Docker','Heroku','Figma','illustrator']\"></skill></p>\n"}},function(e,n){e.exports={attributes:{id:"web-service-03",title:"子ども用ポイント記録サービス 「Kポイント」",description:"自分の子供が、どうにもグータラしているので、人参ぶら下げてやる気を出させようと作成したサービスです。",thumbnail:"portfolio/images/web_service/k_point_thumb.png",createdAt:"2021-12-15T00:00:00.000Z",order:8},html:'<p>子供が自宅で毎日ダラダラと自堕落なを過ごしているので、紙でポイントカードを作りポイントが貯まったら何かに交換してあげる制度を作ったら、思った以上に楽しそうにポイントを貯め出しました。</p>\n<p>ただ、紙で作ったので、修正が発生した場合はその都度プリントアウトが必要で少し面倒でした。</p>\n<p>そこで、ポイントの記録と、商品への交換がでいるだけの簡単なサービスを作りました。</p>\n<p>ちなみにサービス名にある「K」は私の子供のイニシャルです。</p>\n<h3>トップページ</h3>\n<p>獲得しているポイントと、各画面へのナビゲーションを表示。</p>\n<p><dynamic-image path="portfolio/images/web_service/k_point_01.png" alt="トップページ" ></dynamic-image></p>\n<h4>ポイント付与、プレゼント付与ページ</h4>\n<p>がんばったらポイントをあげるページと、ポイントが貯まったらプレゼントに交換してあげるページ。</p>\n<p><dynamic-image path="portfolio/images/web_service/k_point_02.png" alt="ポイント付与、プレゼント付与ページ" ></dynamic-image></p>\n<p>ボタンを押すとダイアログが表示される。</p>\n<p><dynamic-image path="portfolio/images/web_service/k_point_03.png" alt="ポイント付与、プレゼント付与ページ" ></dynamic-image></p>\n<h4>ポイント、プレゼント編集ページ</h4>\n<p>ポイントと、プレゼントの編集画面。親が使う。\n<dynamic-image path="portfolio/images/web_service/k_point_04.png" alt="ポイント付与、プレゼント付与ページ" ></dynamic-image></p>\n<h2>使用した技術・ツール</h2>\n<p><skill :items="[\'Vue3\',\'Typescript\',\'Firebase\',\'Figma\',\'illustrator\']"></skill></p>\n'}},function(e,n){e.exports={attributes:{id:"webgl",title:"WebGLの習作",description:"WebGLの習作です。",thumbnail:"portfolio/images/webgl/webgl_01_thumb.png",createdAt:"2017-10-01T00:00:00.000Z",order:5},html:'<p>私のプログラムスキルだとWebGLはとにかく難しいです。<br>\nthree.jsを少しさわるくらいならなんとかなるのですが、Shaderがとにかく難しいです。<br>\nWebGLは絵がでるまでが果てしなく遠いです。</p>\n<h2>01</h2>\n<p>WebGLを学んだら必ずやりたくなるのがglitchです。<br>\nデバイスのマイクの音を取得してglitchさせています。<br>\nライブラリが古いせいなのか、久しぶりに見たらマイクでのglitchができなくなっていました。</p>\n<p><dynamic-image path="portfolio/images/webgl/webgl01.gif" alt="webglイメージ" ></dynamic-image></p>\n<p><a href="https://nogson.github.io/glsl_01/" class="link-text-right">view</a></p>\n<h2>02</h2>\n<p>パーティクルにテクスチャをはって、ランタンの打ち上げを作りました。\nカリングの制御が上手くできていません。</p>\n<p><dynamic-image path="portfolio/images/webgl/webgl02.gif" alt="webglイメージ" ></dynamic-image></p>\n<p><a href="https://nogson.github.io/threejs_sample5/app/" class="link-text-right">view</a></p>\n<h2>03</h2>\n<p>メタボールをやってみたくてチャレンジしましたが、ここで諦めました。</p>\n<p><dynamic-image path="portfolio/images/webgl/webgl03.gif" alt="webglイメージ" ></dynamic-image></p>\n<p><a href="https://nogson.github.io/glsl_03/" class="link-text-right">view</a></p>\n<h2>04</h2>\n<p>正規ベクトルを使って向きを制御する練習のために作りました。<br>\nブリーフ履いて歩いているのは私のキャラクターです。</p>\n<p><dynamic-image path="portfolio/images/webgl/webgl04.gif" alt="webglイメージ" ></dynamic-image></p>\n<p><a href="https://nogson.github.io/threejs_sample2/app/" class="link-text-right">view</a></p>\n<h2>05</h2>\n<p>一応時計になっています。見えませんが。。。</p>\n<p><dynamic-image path="portfolio/images/webgl/webgl05.gif" alt="webglイメージ" ></dynamic-image></p>\n<p><a href="https://nogson.github.io/webgl_clock/app/" class="link-text-right">view</a></p>\n'}},function(e,n,t){"use strict";t(437)},function(e,n,t){var o=t(28)(!1);o.push([e.i,'.img-wrapper[data-v-3edfe630]{margin:24px auto}.filter[data-v-3edfe630]{background-color:#ababab;display:flex;flex:1 1 100%;height:100%;overflow:hidden;padding:0;position:relative}.filter img[data-v-3edfe630]{margin:0!important;filter:grayscale(100%) contrast(1);flex:1 0 100%;max-width:100%;-o-object-fit:cover;object-fit:cover;opacity:1;position:relative}.filter[data-v-3edfe630]:before,.filter img[data-v-3edfe630]{height:100%;mix-blend-mode:overlay;width:100%}.filter[data-v-3edfe630]:before{background-color:#2d2a4d;bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:1}',""]),e.exports=o}])]);